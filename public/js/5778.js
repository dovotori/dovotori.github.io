"use strict";(self.webpackChunkdovotori=self.webpackChunkdovotori||[]).push([[5778],{95778:(n,e,r)=>{r.r(e),r.d(e,{default:()=>o});const o={vertex:"\nattribute vec3 position;\nattribute vec3 normale;\nattribute vec2 texture;\n\nuniform mat4 projection;\nuniform mat4 model;\nuniform mat4 view;\nuniform mat3 normalMatrix;\nuniform vec3 posLum;\n\nvarying vec3 fragNormale;\nvarying vec2 fragTexture;\n\nvarying vec3 fragPosLum;\nvarying vec3 fragPosEye;\nvarying vec3 fragHalfVec;\n\nvoid main() {\n  fragTexture = texture;\n\n  // ESPACE TANGENT\n  vec3 tangent;\n  vec3 binormal;\n  vec3 normal;\n\n  vec3 c1 = cross(normale, vec3(0.0, 0.0, 1.0));\n  vec3 c2 = cross(normale, vec3(0.0, 1.0, 0.0));\n  if(length(c1) > length(c2))\n  {\n    tangent = c1;\n  } else {\n    tangent = c2;\n  }\n\n  normal = normalize(normalMatrix * normale);\n  tangent = normalize(normalMatrix * tangent);\n  binormal = cross(normal, tangent);\n  binormal = normalize(binormal);\n\n  vec3 mvPosition = (view * model * vec4(position, 1.0)).xyz;\n  fragNormale = normal;\n  vec3 lumDir = normalize(posLum - mvPosition);\n\n  vec3 v;\n  v.x = dot(lumDir, tangent);\n  v.y = dot(lumDir, binormal);\n  v.z = dot(lumDir, normal);\n  fragPosLum = normalize(v);\n\n  v.x = dot(mvPosition, tangent);\n  v.y = dot(mvPosition, binormal);\n  v.z = dot(mvPosition, normal);\n  fragPosEye = normalize(v);\n\n  vec3 halfVector = normalize(normalize(mvPosition) + lumDir);\n  v.x = dot(halfVector, tangent);\n  v.y = dot(halfVector, binormal);\n  v.z = dot(halfVector, normal);\n  fragHalfVec = v;\n\n  gl_Position = projection * view * model * vec4(position, 1.0);\n}\n",fragment:"\nprecision mediump float;\n\nvarying vec3 fragNormale;\nvarying vec2 fragTexture;\n\nvarying vec3 fragPosLum;\nvarying vec3 fragPosEye;\nvarying vec3 fragHalfVec;\n\nuniform sampler2D textureMap;\nuniform sampler2D tex1;\nuniform float brillance;\nuniform vec3 specular;\n\nvec3 bump() {\n  vec3 color = texture2D(textureMap, fragTexture).rgb * 0.5;\n\n  vec3 normal = 2.0 * texture2D(tex1, fragTexture).rgb - 1.0;\n  normal = normalize(normal);\n\n  // diffuse\n  float lambert = max(dot(fragPosLum, normal), 0.0);\n  color += texture2D(textureMap, fragTexture).rgb * lambert * 0.4;\n\n  // specular\n  if(lambert > 0.0) {\n    float specularValue = pow(max(dot(fragHalfVec, normal), 0.0), brillance);\n    color += specular * specularValue * 0.4;\n  }\n\n\treturn color;\n}\n\nvoid main() {\n\tgl_FragColor = vec4(bump(), 1.0);\n}\n",attributes:["position","normale","texture"],uniforms:["projection","model","view","normalMatrix","posLum","textureMap","tex1","brillance","specular"]}}}]);