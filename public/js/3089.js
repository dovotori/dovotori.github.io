"use strict";(self.webpackChunkdovotori=self.webpackChunkdovotori||[]).push([[3089,1014],{51014:(n,e,t)=>{t.r(e),t.d(e,{default:()=>o});const o="\nattribute vec3 position;\nattribute vec2 texture;\nvarying vec2 fragTexture;\nuniform float flipY; // 1 ou -1\n\nvoid main() {\n  fragTexture = texture;\n  gl_Position = vec4(position.x, position.y * flipY, position.z, 1.0);\n}\n"},93089:(n,e,t)=>{t.r(e),t.d(e,{default:()=>o});const o={vertex:t(51014).default,fragment:"\nprecision mediump float;\n\nuniform sampler2D textureMap;\nuniform vec2 resolution;\nvarying vec2 fragTexture;\nuniform float time;\nuniform float delta;\nuniform float rate;\n\nfloat random(vec2 c){\n  return fract(sin(dot(c.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v) {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n  // First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n  // Other corners\n  vec3 g_0 = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g_0;\n  vec3 i1 = min( g_0.xyz, l.zxy );\n  vec3 i2 = max( g_0.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n  // Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n  // Gradients: 7x7 points over a square, mapped onto an octahedron.\n  // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n  //Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n  // Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );\n}\n\nvec4 applyGlitch4(\n  sampler2D tex,\n  vec2 uv,\n  vec2 resolution,\n  float glitchRate,\n  float glitchInterval,\n  float time\n) {\n  float strength = smoothstep(\n    glitchInterval * glitchRate,\n    glitchInterval,\n    glitchInterval - mod(time, glitchInterval)\n  );\n  vec2 shake = vec2(strength * 8.0 + 0.5) * vec2(\n    random(vec2(time)) * 2.0 - 1.0,\n    random(vec2(time * 2.0)) * 2.0 - 1.0\n  ) / resolution;\n\n  float y = uv.y * resolution.y;\n\n  float alpha = 1.0; // texture2D(textureMap, uv).a;\n\n  float rgbWave = (\n      snoise(vec3(0.0, y * 0.01, time * 400.0)) * (2.0 + strength * 32.0)\n      * snoise(vec3(0.0, y * 0.02, time * 200.0)) * (1.0 + strength * 4.0)\n      + step(0.9995, sin(y * 0.005 + time * 1.6)) * 12.0\n      + step(0.9999, sin(y * 0.005 + time * 2.0)) * -18.0\n    ) / resolution.x;\n  float rgbDiff = (6.0 + sin(time * 500.0 + uv.y * 40.0) * (20.0 * strength + 1.0)) / resolution.x;\n  float rgbUvX = uv.x + rgbWave;\n  float r = texture2D(textureMap, vec2(rgbUvX + rgbDiff, uv.y) + shake).r;\n  float g = texture2D(textureMap, vec2(rgbUvX, uv.y) + shake).g;\n  float b = texture2D(textureMap, vec2(rgbUvX - rgbDiff, uv.y) + shake).b;\n\n  float whiteNoise = (random(uv + mod(time, 10.0)) * 2.0 - 1.0) * (0.15 + strength * 0.15);\n\n  float bnTime = floor(time * 20.0) * 200.0;\n  float noiseX = step((snoise(vec3(0.0, uv.x * 3.0, bnTime)) + 1.0) / 2.0, 0.12 + strength * 0.3);\n  float noiseY = step((snoise(vec3(0.0, uv.y * 3.0, bnTime)) + 1.0) / 2.0, 0.12 + strength * 0.3);\n  float bnMask = noiseX * noiseY;\n  float bnUvX = uv.x + sin(bnTime) * 0.2 + rgbWave;\n  float bnR = texture2D(textureMap, vec2(bnUvX + rgbDiff, uv.y)).r * bnMask;\n  float bnG = texture2D(textureMap, vec2(bnUvX, uv.y)).g * bnMask;\n  float bnB = texture2D(textureMap, vec2(bnUvX - rgbDiff, uv.y)).b * bnMask;\n  vec4 blockNoise = vec4(bnR, bnG, bnB, alpha);\n\n  float bnTime2 = floor(time * 25.0) * 300.0;\n  float noiseX2 = step((snoise(vec3(0.0, uv.x * 2.0, bnTime2)) + 1.0) / 2.0, 0.12 + strength * 0.5);\n  float noiseY2 = step((snoise(vec3(0.0, uv.y * 8.0, bnTime2)) + 1.0) / 2.0, 0.12 + strength * 0.3);\n  float bnMask2 = noiseX2 * noiseY2;\n  float bnR2 = texture2D(textureMap, vec2(bnUvX + rgbDiff, uv.y)).r * bnMask2;\n  float bnG2 = texture2D(textureMap, vec2(bnUvX, uv.y)).g * bnMask2;\n  float bnB2 = texture2D(textureMap, vec2(bnUvX - rgbDiff, uv.y)).b * bnMask2;\n  vec4 blockNoise2 = vec4(bnR2, bnG2, bnB2, alpha);\n\n  float waveNoise = (sin(uv.y * 1200.0) + 1.0) / 2.0 * (0.15 + strength * 0.2);\n\n  return vec4(r, g, b, alpha) * (1.0 - bnMask - bnMask2) \n    + (whiteNoise + blockNoise + blockNoise2 - waveNoise);\n}\n\nvoid main() {\n    vec4 glitchColor = applyGlitch4(textureMap, fragTexture, resolution, 1.0, 1.0, time);\n    vec4 textColor = texture2D(textureMap, fragTexture);\n    gl_FragColor = vec4(glitchColor.xyz, textColor.w);\n}\n",attributes:["position","texture"],uniforms:["flipY","textureMap","time","resolution","delta","rate"]}}}]);