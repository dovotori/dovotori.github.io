(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{254:function(n,e,t){"use strict";t.r(e);e.default={vertex:"\nattribute vec3 position;\nattribute vec3 next;\nattribute vec3 previous;\nattribute vec2 texture;\nattribute float side;\n\nuniform float weight;\nuniform float time;\n\nvarying vec2 fragTexture;\n\nvec4 getPosition() {\n  vec2 nextScreen = next.xy;\n  vec2 prevScreen = previous.xy;\n\n  vec2 tangent = normalize(nextScreen - prevScreen);\n  vec2 normal = vec2(-tangent.y, tangent.x);\n  // normal *= 0.1;\n  // normal *= texture.x * 0.2;\n  // normal *= pow(texture.x, 2.0) * 0.2;\n  normal *= 1.0 - pow(abs(texture.x - 0.5) * 2.0, 2.0);\n  // normal *= abs(fract(texture.x * 2.0) - 0.5) * 0.4;\n  // normal *= cos(texture.x * 12.56) * 0.1 + 0.2;\n  // normal *= (1.0 - abs(texture.x - 0.5) * 2.0) * 0.2;\n  // normal *= (1.0 - pow(abs(texture.x - 0.5) * 2.0, 2.0)) * 0.2;\n\n  normal *= weight;\n\n  // When the points are on top of each other, shrink the line to avoid artifacts.\n  float dist = length(nextScreen - prevScreen);\n  normal *= smoothstep(0.0, 0.02, dist);\n\n  vec4 current = vec4(position, 1.0);\n  current.xy -= normal * side;\n  return current;\n}\n\nvoid main() {\n  fragTexture = fragTexture;\n  gl_Position = getPosition();\n}\n",fragment:"\nprecision mediump float;\n\nvarying vec2 fragTexture;\n\nuniform vec3 color;\n\nvoid main() {\n  gl_FragColor = vec4(color, 1.0);\n}\n",attributes:["position","texture","next","previous","side"],uniforms:["time","weight","color"]}}}]);