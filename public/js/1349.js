"use strict";(self.webpackChunkdovotori=self.webpackChunkdovotori||[]).push([[1349,1014],{51014:(e,n,t)=>{t.r(n),t.d(n,{default:()=>r});const r="\nattribute vec3 position;\nattribute vec2 texture;\nvarying vec2 fragTexture;\nuniform float flipY; // 1 ou -1\n\nvoid main() {\n  fragTexture = texture;\n  gl_Position = vec4(position.x, position.y * flipY, position.z, 1.0);\n}\n"},81349:(e,n,t)=>{t.r(n),t.d(n,{default:()=>r});const r={vertex:t(51014).default,fragment:"\nprecision mediump float;\n\nuniform sampler2D textureMap;\nuniform sampler2D noiseMap;\nuniform vec2 resolution;\n\nvarying vec2 fragTexture;\n\n// Table of pigments \n// from Computer-Generated Watercolor. Cassidy et al.\n// K is absortion. S is scattering\nvec3 K_QuinacridoneRose = vec3(0.22, 1.47, 0.57);\nvec3 S_QuinacridoneRose = vec3(0.05, 0.003, 0.03);\nvec3 K_FrenchUltramarine = vec3(0.86, 0.86, 0.06);\nvec3 S_FrenchUltramarine = vec3(0.005, 0.005, 0.09);\nvec3 K_CeruleanBlue = vec3(1.52, 0.32, 0.25);\nvec3 S_CeruleanBlue = vec3(0.06, 0.26, 0.40);\nvec3 K_HookersGreen = vec3(1.62, 0.61, 1.64);\nvec3 S_HookersGreen = vec3(0.01, 0.012, 0.003);\nvec3 K_HansaYellow = vec3(0.06, 0.21, 1.78);\nvec3 S_HansaYellow = vec3(0.50, 0.88, 0.009);\n\n// Math functions not available in webgl\nvec3 cosh(vec3 val) { vec3 e = exp(val); return (e + vec3(1.0) / e) / vec3(2.0); }\nvec3 tanh(vec3 val) { vec3 e = exp(val); return (e - vec3(1.0) / e) / (e + vec3(1.0) / e); }\nvec3 sinh(vec3 val) { vec3 e = exp(val); return (e - vec3(1.0) / e) / vec3(2.0); }\n\n// Kubelka-Munk reflectance and transmitance model\nvec3 KMrefl(vec3 k, vec3 s, float h) {\n  vec3 a = (k+s)/s;\n  vec3 b = sqrt(a*a - vec3(1.0));\n  vec3 bsh = b*s*vec3(h);\n  vec3 sinh_bsh = sinh(bsh);\n  vec3 denom = b*cosh(bsh)+a*sinh_bsh;\n  return sinh_bsh/denom;\n}\n\nvec3 KMtrans(vec3 k, vec3 s, float h) {\n  vec3 a = (k+s)/s;\n  vec3 b = sqrt(a*a - vec3(1.0));\n  vec3 bsh = b*s*vec3(h);\n  vec3 sinh_bsh = sinh(bsh);\n  vec3 denom = b*cosh(bsh)+a*sinh_bsh;\n  return b/denom;\n}\n\n// The watercolours tends to dry first in the center\n// and accumulate more pigment in the corners\nfloat brush_effect(float dist, float h_avg, float h_var) {\n  float h = max(0.0,1.0-10.0*abs(dist));\n  h *= h;\n  h *= h;\n  return (h_avg+h_var*h) * smoothstep(-0.01, 0.002, dist);\n}\n\n// Kubelka-Munk model for layering\nvec3 layeringR(vec3 r0, vec3 t0, vec3 r1, vec3 t1) {\n  return r0 + t0*t0*r1 / (vec3(1.0)-r0*r1);\n}\n\nvec3 layeringT(vec3 r0, vec3 t0, vec3 r1, vec3 t1) {\n  return t0*t1 / (vec3(1.0)-r0*r1);\n}\n\n// Simple 2d noise fbm with 3 octaves\nfloat noise2d(vec2 p) {\n  float t = texture2D(noiseMap, p).x;\n  t += 0.5 * texture2D(noiseMap, p * 2.0).x;\n  t += 0.25 * texture2D(noiseMap, p * 4.0).x;\n  return t / 1.75;\n}\n\nvoid main() {\n\tvec2 uv = fragTexture;\n  vec3 r0,t0,r1,t1;\n  vec4 color = texture2D(textureMap, fragTexture);\n  \n  float sky = 0.1 + 0.1 * noise2d(uv * vec2(0.1));\n  r0 = KMrefl(color.xyz, color.xyz, sky);\n  t0 = KMtrans(color.xyz, color.xyz, sky);\n  \n  // float mountain_line = 0.5+0.04*(sin(uv.x*18.0+2.0)+sin(sin(uv.x*2.0)*7.0))-uv.y;\n  // float s = clamp(2.0-10.0*abs(mountain_line),0.0,1.0);\n  // vec2 uv2 = uv + vec2(0.04*s*noise2d(uv * vec2(0.1)));\n  // float mountains = brush_effect(\n  //   0.5 + 0.04 * (sin(uv2.x * 18.0 + 2.0) + sin(sin(uv2.x * 2.0) * 7.0)) - uv2.y, 0.2, 0.1\n  // );\n  // mountains *= 0.85+0.15*noise2d(uv*vec2(0.2));\n  // r1 = KMrefl(K_HookersGreen, S_HookersGreen, mountains);\n  // t1 = KMtrans(K_HookersGreen, S_HookersGreen, mountains);\n  // r0 = layeringR(r0,t0,r1,t1);\n  // t0 = layeringT(r0,t0,r1,t1);\n  \n  // vec2 uv3 = uv*vec2(1.0,resolution.y/resolution.x) + vec2(0.02*noise2d(uv * vec2(0.2)));\n  // float sun = brush_effect(1.0 - distance(uv3, vec2(0.2,0.45)) / 0.08, 0.2, 0.1);\n  // r1 = KMrefl(K_HansaYellow, S_HansaYellow, sun);\n  // t1 = KMtrans(K_HansaYellow, S_HansaYellow, sun);\n\n  // r0 = layeringR(r0,t0,r1,t1);\n  // t0 = layeringT(r0,t0,r1,t1);\n\n  vec4 effect = vec4(r0 + t0, 1.0);\n    \n\tgl_FragColor = vec4(effect.xyz, color.a);\n}",attributes:["position","texture"],uniforms:["flipY","textureMap","noiseMap"]}}}]);