"use strict";(self.webpackChunkdovotori=self.webpackChunkdovotori||[]).push([[4251,5160],{45160:(n,t,i)=>{i.r(t),i.d(t,{default:()=>e});var o=i(84251);const e={vertex:"\nattribute vec3 position;\nattribute vec3 normale;\nattribute vec4 joint;\nattribute vec4 weight;\n\nuniform mat4 projection;\nuniform mat4 model;\nuniform mat4 view;\nuniform mat4 jointMat[4];\nuniform mat3 normalMatrix;\n\nvarying vec3 fragPosition;\nvarying vec3 fragNormale;\n\nvoid main() {\n  mat4 skinMat =\n    weight.x * jointMat[int(joint.x)] +\n    weight.y * jointMat[int(joint.y)] +\n    weight.z * jointMat[int(joint.z)] +\n    weight.w * jointMat[int(joint.w)];\n  vec4 VMpos = view * model * skinMat * vec4(position, 1.0);\n  fragPosition = normalize(VMpos.xyz);\n  fragNormale = normalize(normalMatrix * normale);\n  gl_Position = projection * VMpos;\n}\n",fragment:`\nprecision mediump float;\n\nvarying vec3 fragPosition;\nvarying vec3 fragNormale;\n\nuniform vec4 color;\nuniform float rough; \nuniform float metal;\n\n${o.uniformLights}\n${o.funcLightsColor}\n\nvoid main() {\n  vec3 phong = funcLightsColor(\n    color.xyz, vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0), fragNormale, fragPosition\n  );\n  gl_FragColor = vec4(phong, 1.0);\n}\n`,attributes:["position","joint","weight","normale"],uniforms:["projection","model","view","normalMatrix","color","rough","metal","posLum","posEye"].concat((()=>{const n=[];for(let t=0;t<4;t++)n.push(`jointMat[${t}]`);return n})()).concat((0,o.addLightLocations)())}},84251:(n,t,i)=>{i.r(t),i.d(t,{MAX_LIGHTS:()=>o,addLightLocations:()=>a,funcLightAttenuation:()=>l,funcLightConeAttenuation:()=>r,funcLightsColor:()=>c,funcPhong:()=>s,uniformLights:()=>e});const o=10,e=`\n#define MAX_LIGHTS ${o}\nuniform int numLights;\nuniform struct Light {\n   int type;\n   vec3 position;\n   vec3 ambiant;\n   vec3 diffuse;\n   vec3 specular;\n   float radius;\n   vec3 direction;\n   float strength;\n   float brillance;\n} lights[MAX_LIGHTS];\n`,a=()=>{const n=[];for(let t=0;t<o;t+=1)n.push(`lights[${t}].type`),n.push(`lights[${t}].position`),n.push(`lights[${t}].ambiant`),n.push(`lights[${t}].diffuse`),n.push(`lights[${t}].specular`),n.push(`lights[${t}].radius`),n.push(`lights[${t}].direction`),n.push(`lights[${t}].brillance`),n.push(`lights[${t}].strength`);return n.push("numLights"),n},r="\nfloat funcLightConeAttenuation(vec3 posLum, vec3 posDirection, vec3 normale, vec3 position) {\n  float intensity = 0.0;\n  float cutoff = 0.9;\n\n  vec3 lightDirection = normalize(posLum - position); \n  vec3 spotDirection = normalize(posDirection);\n\n  // inside the cone ?\n  if (dot(spotDirection, lightDirection) > cutoff) {\n\n    vec3 n = normalize(normale);\n    intensity = max(dot(n, lightDirection), 0.0);\n\n    // if (intensity > 0.0) {\n    // vec3 eye = normalize(DataIn.eye);\n    // vec3 h = normalize(lightDirection + eye);\n    // float intSpec = max(dot(h,n), 0.0);\n    // spec = specular * pow(intSpec, shininess);\n    // }\n  }\n  return intensity;\n}\n",l="\nfloat funcLightAttenuation(vec3 posLum, float radius, vec3 normale, vec3 position) {\n  float cutoff = 0.1;\n  vec3 lightDirection = posLum - position;\n  float distance = length(lightDirection);\n  float d = max(distance - radius, 0.0);\n  lightDirection /= distance;\n  float denom = d / radius + 1.0;\n  float attenuation = 1.0 / (denom * denom);\n    \n  attenuation = (attenuation - cutoff) / (1.0 - cutoff);\n  attenuation = max(attenuation, 0.0);\n\n  float dot = max(dot(lightDirection, normale), 0.0);\n  return attenuation * dot;\n}\n",s="\nvec3 funcPhong(\n  vec3 position,\n  vec3 normale,\n  vec3 ambiant,\n  vec3 diffuse,\n  vec3 specular,\n  vec3 posLum,\n  float brillance\n  ) {\n  vec3 N = normalize(normale);\n  vec3 L = normalize(posLum - position);\n\n  // Lambert's cosine law\n  float lambertian = max(dot(N, L), 0.0);\n\n  float specularValue = 0.0;\n  if(lambertian > 0.0) {\n    vec3 R = reflect(-L, N); // Reflected light vector\n    vec3 V = normalize(-position); // Vector to viewer\n    float specAngle = max(dot(R, V), 0.0);\n    specularValue = pow(specAngle, brillance);\n  }\n\n  return vec3(ambiant * ((lambertian * diffuse) + (specularValue * specular)));\n}\n",c=`\n${s}\n${r}\n${l}\nvec3 funcLightsColor(vec3 ambiant, vec3 diffuse, vec3 specular, vec3 normale, vec3 position) {\n  vec3 finalColor = vec3(0.0);\n  for(int i = 0; i < MAX_LIGHTS; i += 1) {\n    if(i < numLights) {\n      vec3 color = funcPhong(\n        position,\n        normale,\n        ambiant * (lights[i].ambiant * lights[i].strength),\n        diffuse * (lights[i].diffuse * lights[i].strength),\n        specular * (lights[i].specular * lights[i].strength),\n        lights[i].position,\n        lights[i].brillance\n      );\n      float att = 1.0;\n      if (lights[i].type == 1) {\n        att = funcLightAttenuation(lights[i].position, lights[i].radius, normale, position);\n      } else if (lights[i].type == 2) {\n        att = funcLightConeAttenuation(lights[i].position, lights[i].direction, normale, position);\n      }\n      color *= att;\n      finalColor += color;\n    }\n  }\n  finalColor /= vec3(numLights);\n  return finalColor;\n}\n`}}]);