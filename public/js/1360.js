"use strict";(self.webpackChunkdovotori=self.webpackChunkdovotori||[]).push([[1360,7719],{57719:(n,t,o)=>{o.r(t),o.d(t,{default:()=>e});const e="\nattribute vec3 position;\nattribute vec2 texture;\nvarying vec2 fragTexture;\nuniform float flipY; // 1 ou -1\n\nvoid main() {\n  fragTexture = texture;\n  gl_Position = vec4(position.x, position.y * flipY, position.z, 1.0);\n}\n"},91360:(n,t,o)=>{o.r(t),o.d(t,{default:()=>e});const e={vertex:o(57719).default,fragment:"\nprecision mediump float;\n\nuniform sampler2D textureMap;\nuniform vec2 resolution;\n\nvarying vec2 fragTexture;\n\nfloat hash(vec3 p) {\n\treturn fract(123456.789 * sin(dot(p, vec3(12.34, 56.78, 91.01))));\n}\n\nmat2 rot(float a) {\n  float c = cos(a);\n  float s = sin(a);\n\treturn mat2(c, -s, s, c);\n}\n\nfloat smoothmin(float a, float b, float k) {\n\tfloat f = clamp(0.5 + 0.5 * (a - b) / k, 0., 1.);\n  return mix(a, b, f) - k * f * (1. - f);\n}\n\nfloat smoothmax(float a, float b, float k) {\n\treturn -smoothmin(-a, -b, k);\n}\n\nfloat smoothabs(float p, float k) {\n\treturn sqrt(p * p + k * k) - k;\n}\n\nfloat noise(vec3 p) {\n\tvec3 f = fract(p);\n  f = f * f * (3. - 2. * f);\n  vec3 c = floor(p);\n  \n  return mix(mix(mix(hash(c), hash(c + vec3(1., 0., 0.)), f.x),\n    mix(hash(c + vec3(0., 1., 0.)), hash(c + vec3(1., 1., 0.)), f.x),\n    f.y),\n    mix(mix(hash(c + vec3(0., 0., 1.)), hash(c + vec3(1., 0., 1.)), f.x),\n        mix(hash(c + vec3(0., 1., 1.)), hash(c + vec3(1., 1., 1.)), f.x),\n        f.y),\n    f.z);  \n}\n\nfloat fbm(vec3 p) {\n\tvec3 pos = 10. * p;\n  float c = 0.5;\n  float res = 0.;\n  for(int i = 0; i < 4; i += 1){\n    pos.xy = rot(2.) * pos.xy;\n    pos = pos * 2. + 2.;\n    res += c * noise(pos);\n    c /= 2.;\n  }\n  return res;\n}\n\nvec4 funcWatercolor(vec2 uv) {\n  vec3 inkColor = vec3(0.15, 0.25, 0.4);\n  vec4 color = texture2D(textureMap, fragTexture);\n  float f = fbm(vec3(uv, 1.0) );\n  return mix(vec4(f), color, 0.93);\n}\n\nvoid main() {\n  // mix with a sort of watercolor texture\n  gl_FragColor = funcWatercolor(fragTexture);\n}\n",attributes:["position","texture"],uniforms:["flipY","textureMap"]}}}]);