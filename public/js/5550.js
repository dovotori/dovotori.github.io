"use strict";(self.webpackChunkdovotori=self.webpackChunkdovotori||[]).push([[5550],{84121:(e,r,o)=>{o.r(r),o.d(r,{default:()=>t});const t="\nprecision mediump float;\n\nuniform sampler2D refractMap;\nuniform sampler2D reflectMap;\nuniform sampler2D distortionMap;\nuniform sampler2D normaleMap;\nuniform sampler2D waterDepthTexture;\nuniform sampler2D depthMap;\n\nuniform float waterReflectivity;\nuniform float fresnelStrength;\n\nvarying vec3 fragEyeDir;\nvarying vec2 fragMoving;\nvarying vec4 clipSpace;\nvarying vec2 fragTexture;\n\nvec3 sunlightColor = vec3(1.0, 1.0, 1.0);\nvec3 sunlightDir = normalize(vec3(-1.0, -1.0, 0.5));\nconst float waterDistortionStrength = 0.03;\nconst float shineDamper = 20.0;\nvec4 shallowWaterColor =  vec4(0.0, 0.1, 0.3, 1.0);\nvec4 deepWaterColor = vec4(0.0, 0.1, 0.2, 1.0);\n\nvec3 getNormal(vec2 uv) {\n  vec4 normalMapColor = texture2D(normaleMap, uv);\n  float makeNormalPointUpwardsMore = 2.6;\n  vec3 normal = vec3(\n    normalMapColor.r * 2.0 - 1.0,\n    normalMapColor.b * makeNormalPointUpwardsMore,\n    normalMapColor.g * 2.0 - 1.0\n  );\n  normal = normalize(normal);\n  return normal;\n}\n\nvoid main() {\n  // Normalized device coordinates - Between 0 and 1\n  vec2 ndc = (clipSpace.xy / clipSpace.w) / 2.0 + 0.5;\n\n  vec2 refractTexCoords = vec2(ndc.x, ndc.y);\n  // Reflections are upside down\n  vec2 reflectTexCoords = vec2(ndc.x, -ndc.y);\n\n  float near = 0.1;\n  float far = 50.0;\n\n  // Get the distance from our camera to the first thing under this water fragment that a\n  // ray would collide with. This might be the ground, the under water walls, a fish, or any\n  // other thing under the water. This distance will depend on our camera angle.\n  float cameraToFirstThingBehindWater = texture2D(waterDepthTexture, refractTexCoords).r;\n  // Convert from our perspective transformed distance to our world distance\n  float cameraToFirstThingUnderWater = 2.0 * near * far /\n    (far + near - (2.0 * cameraToFirstThingBehindWater - 1.0)\n    * (far - near));\n\n  float cameraToWaterDepth = gl_FragCoord.z;\n  float cameraToWaterDistance = 2.0 * near * far / (far + near - (2.0 * cameraToWaterDepth - 1.0) * (far - near));\n\n  float angledWaterDepth = cameraToFirstThingUnderWater - cameraToWaterDistance;\n\n  vec2 distortedTexCoords = texture2D(distortionMap, vec2(fragTexture.x + fragMoving.x, fragTexture.y)).rg * 0.1;\n  distortedTexCoords = fragTexture + vec2(distortedTexCoords.x, distortedTexCoords.y + fragMoving.x);\n\n  // Between -1 and 1\n  vec2 totalDistortion = (texture2D(distortionMap, distortedTexCoords).rg * 2.0 - 1.0)\n    * waterDistortionStrength;\n\n  refractTexCoords += totalDistortion;\n  reflectTexCoords += totalDistortion;\n\n  // soft edges\n  refractTexCoords = clamp(refractTexCoords, 0.001, 0.999);\n  reflectTexCoords.x = clamp(reflectTexCoords.x, 0.001, 0.999);\n  reflectTexCoords.y = clamp(reflectTexCoords.y, -0.999, -0.001);\n\n  vec4 reflectColor = texture2D(reflectMap, reflectTexCoords);\n  vec4 refractColor = texture2D(refractMap, refractTexCoords);\n\n  // The deeper the water the darker the color\n  refractColor = mix(refractColor, deepWaterColor, clamp(angledWaterDepth / 10.0, 0.0, 1.0));\n\n  vec3 toCamera = normalize(fragEyeDir);\n  vec3 normal = getNormal(distortedTexCoords);\n\n  // fresnel\n  float refractiveFactor = dot(toCamera, normal);\n  refractiveFactor = pow(refractiveFactor, fresnelStrength);\n\n  vec3 reflectedLight = reflect(normalize(sunlightDir), normal);\n  float specular = max(dot(reflectedLight, toCamera), 0.0);\n  specular = pow(specular, shineDamper);\n  vec3 specularHighlights = sunlightColor * specular * waterReflectivity;\n\n  gl_FragColor = mix(reflectColor, refractColor, refractiveFactor);\n  // Mix in a bit of blue so that it looks like water\n  gl_FragColor = mix(gl_FragColor, shallowWaterColor, 0.2) + vec4(specularHighlights, 0.0);\n}\n"}}]);