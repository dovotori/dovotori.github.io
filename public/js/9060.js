"use strict";(self.webpackChunkdovotori=self.webpackChunkdovotori||[]).push([[9060],{99060:(n,o,t)=>{t.r(o),t.d(o,{funcLightsToon:()=>r,funcToon:()=>i,getToonStrength:()=>e});const e="\nfloat getToonStrength(float lambertCosinus) {\n  if (lambertCosinus > 0.7) {\n    return 0.8;\n  } else if (lambertCosinus > 0.3) {\n    return 0.5;\n  }\n  return 0.3;\n}\n",i=`\n${e}\nvec3 funcToon(\n  vec3 position,\n  vec3 normale,\n  vec3 ambiant,\n  vec3 posLum\n  ) {\n  vec3 N = normalize(normale);\n  vec3 L = normalize(posLum - position);\n  // Lambert's cosine law\n  float lambertian = max(dot(N, L), 0.0);\n  float strength = getToonStrength(lambertian);\n  return vec3(ambiant) * vec3(strength);\n}\n`,r=`\n${i}\nvec3 funcLightsToon(vec3 ambiant, vec3 position, vec3 normale) {\n  vec3 finalColor = vec3(0.0);\n  for(int i = 0; i < MAX_LIGHTS; i += 1) {\n    if(i < numLights) {\n      vec3 color = funcToon(\n        position,\n        normale,\n        ambiant * (lights[i].ambiant * lights[i].strength),\n        lights[i].position\n      );\n      finalColor += color;\n    }\n  }\n  finalColor /= vec3(numLights);\n  return finalColor;\n}\n`}}]);