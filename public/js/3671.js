"use strict";(self.webpackChunkdovotori=self.webpackChunkdovotori||[]).push([[3671,7719,6507],{57719:(o,n,r)=>{r.r(n),r.d(n,{default:()=>e});const e="\nattribute vec3 position;\nattribute vec2 texture;\nvarying vec2 fragTexture;\nuniform float flipY; // 1 ou -1\n\nvoid main() {\n  fragTexture = texture;\n  gl_Position = vec4(position.x, position.y * flipY, position.z, 1.0);\n}\n"},36507:(o,n,r)=>{r.r(n),r.d(n,{default:()=>e});const e="\nvec3 getSunSky(vec2 uv) {\n  float horizonY = uv.y - 0.05;\n\tvec3 rayDir = normalize(vec3(uv.x, horizonY, 1.5));\n  vec3 sundir = normalize(vec3(0.0, 0.1, 1.0));\n  float yd = min(rayDir.y, 0.0);\n  rayDir.y = max(rayDir.y, 0.0);\n  vec3 color = vec3(0.0);\n  color += SUN_SKY_COLOR_1 * vec3(1.0, 0.4 - exp(-rayDir.y * 20.0) * 0.3, 0.2)\n    * exp(-rayDir.y * 9.0);\n  color += SUN_SKY_COLOR_2 * (1.0 - exp(-rayDir.y * 8.0)) * exp(-rayDir.y * 0.9) ; \n  // color = mix(color * 1.2, vec3(0.3),  1.0 - exp(yd * 100.0)); // Fog\n  color += SUN_COLOR * pow(max(dot(rayDir, sundir), 0.0), 15.0) * SUN_INTENSITY; // Sun big halo\n  color += pow(max(dot(rayDir, sundir), 0.0), 150.0) * 0.15; // Sun little halo\n  return color;\n}\n"},93671:(o,n,r)=>{r.r(n),r.d(n,{default:()=>c});var e=r(36507),t=r(57719);const i=`\nprecision mediump float;\n\nuniform vec2 resolution;\nuniform float time;\n\nvarying vec2 fragTexture;\n\n${e.default}\n\nfloat checker(vec2 p) {\n  p = mod(floor(p), 2.0);\n  return mod(p.x + p.y, 2.0) < 1.0 ? 0.25 : 0.1;\n}\n\nvec3 sky(vec2 uv, vec2 resolution) {\n  // Screen coords\n\tvec2 q = uv; // / resolution;\n\tvec2 v = -1.0 + 2.0 * q;\n\t// v.x *= resolution.x / resolution.y;\n\t\n  float horizonY = v.y - 0.05;\n\n\t// Camera ray\n\tvec3 dir = normalize(vec3(v.x, horizonY, 1.5));\n\t\n  vec3 colorFloor = vec3(0.0, 0.0, 0.1);\n  // vec3 colorFloor = vec3(checker(dir.xz / dir.y * 0.5 + vec2(0.0, -time * 2.0)));\n  // vec3 colorReflect = getSunSky(reflect(dir, vec3(0.0, 1.0, 0.0)));\n\n  vec3 colorSky = getSunSky(uv);\n\n  // Scene\n  float mixRatio = exp(-max(-horizonY, 0.0));\n  vec3 color = mix(colorFloor, colorSky, mixRatio);\n\n  // Vignetting\n\t// color *= 0.7 + 0.3 * pow(q.x * q.y * (1.0 - q.x) * (1.0 - q.y) * 16.0, 0.1);\n        \n\treturn color;\n}\n\nvoid main() {\n  vec3 color = sky(fragTexture, resolution);\n  gl_FragColor = vec4(color, 1.0);\n}\n`,c={vertex:t.default,fragment:i,attributes:["position","texture"],uniforms:["flipY","resolution","time"]}}}]);