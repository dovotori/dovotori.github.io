"use strict";(self.webpackChunkdovotori_portfolio=self.webpackChunkdovotori_portfolio||[]).push([[8390,7719,552],{57719:(t,n,e)=>{e.r(n),e.d(n,{default:()=>a});const a="\nattribute vec3 position;\nattribute vec2 texture;\nvarying vec2 fragTexture;\nuniform float flipY; // 1 ou -1\n\nvoid main() {\n  fragTexture = texture;\n  gl_Position = vec4(position.x, position.y * flipY, position.z, 1.0);\n}\n"},28390:(t,n,e)=>{e.r(n),e.d(n,{default:()=>i});var a=e(20552),r=e(57719),o="\nprecision mediump float;\n\nuniform sampler2D textureMap;\nuniform float time;\n\nvarying vec2 fragTexture;\n\n".concat(a.PI,"\n\nvoid main() {\n\tvec2 p = fragTexture * 2.0 - 1.0;\n  float a = atan(p.y, p.x);\n  float r = pow(pow(p.x * p.x, 4.0) + pow(p.y * p.y, 4.0), 1.0 / 8.0);\n  \n  // index texture by (animated inverse) radious and angle\n  vec2 uv = vec2( 0.3 / r + 0.2 * time, a / PI);\n\n  // vec3 col =  texture2D(textureMap, uv).xyz;\n  vec3 col =  vec3(cos(uv.x), 0.0, 0.0);\n  // darken at the center    \n  col = col * r;\n\tgl_FragColor = vec4(col, 1.0);\n}\n");const i={vertex:r.default,fragment:o,attributes:["position","texture"],uniforms:["flipY","textureMap","time"]}},20552:(t,n,e)=>{e.r(n),e.d(n,{PI:()=>a,TWO_PI:()=>r,attributeColors:()=>o,funcGradiant:()=>l,funcGrain:()=>u,funcMap:()=>f,varyingColors:()=>i});var a="\n#define PI 3.14159265359\n",r="\n#define TWO_PI 6.28318530718\n",o="\nattribute vec3 ambiant;\nattribute vec3 diffuse;\nattribute vec3 specular;\nattribute float specDensity;\nattribute float opacity;\n",i="\nvarying vec3 fragAmbiant;\nvarying vec3 fragDiffuse;\nvarying vec3 fragSpecular;\nvarying float fragSpecDensity;\nvarying float fragOpacity;\n",f="\nfloat funcMap(float valeur, float minRef, float maxRef, float minDest, float maxDest) {\n  float result = minDest + (valeur - minRef) * (maxDest - minDest) / (maxRef - minRef);\n  if(result > maxDest){ result = maxDest; } else if(result < minDest){ result = minDest; }\n  return result;\n}\n",u="\nvec4 funcGrain(vec2 uv, float time, float strength) {\n  float x = (uv.x + 4.0 ) * (uv.y + 4.0 ) * (time * 10.0);\n  return vec4(mod((mod(x, 13.0) + 1.0) * (mod(x, 123.0) + 1.0), 0.01)-0.005) * strength;\n}\n",l="\n".concat(f,"\nvec4 funcGradiant(vec4 color1, vec4 color2, float start, float end, float uvAxe) {\n  float mixValue = funcMap(uvAxe, start, end, 0.0, 1.0);\n  return mix(color1, color2, mixValue);\n}\n")}}]);