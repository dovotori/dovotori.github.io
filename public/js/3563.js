"use strict";(self.webpackChunkdovotori_portfolio=self.webpackChunkdovotori_portfolio||[]).push([[3563,7719],{57719:(e,t,r)=>{r.r(t),r.d(t,{default:()=>n});const n="\nattribute vec3 position;\nattribute vec2 texture;\nvarying vec2 fragTexture;\nuniform float flipY; // 1 ou -1\n\nvoid main() {\n  fragTexture = texture;\n  gl_Position = vec4(position.x, position.y * flipY, position.z, 1.0);\n}\n"},73563:(e,t,r)=>{r.r(t),r.d(t,{default:()=>n});const n={vertex:r(57719).default,fragment:"\nprecision mediump float;\n\nuniform sampler2D textureMap;\nuniform vec2 resolution;\nvarying vec2 fragTexture;\n\nvec3 funcFxaa() {\n  // The inverse of the texture dimensions along X and Y\n  vec2 texcoordOffset = 1. / resolution;\n\n  vec4 vertTexcoord = vec4(fragTexture, 1., 1.);\n\n  // The parameters are hardcoded for now, but could be\n  // made into uniforms to control fromt he program.\n  float FXAA_SPAN_MAX = 8.0;\n  float FXAA_REDUCE_MUL = 1.0/8.0;\n  float FXAA_REDUCE_MIN = (1.0 / 128.0);\n\n  vec3 rgbNW = texture2D(textureMap, vertTexcoord.xy + (vec2(-1.0, -1.0) * texcoordOffset)).xyz;\n  vec3 rgbNE = texture2D(textureMap, vertTexcoord.xy + (vec2(+1.0, -1.0) * texcoordOffset)).xyz;\n  vec3 rgbSW = texture2D(textureMap, vertTexcoord.xy + (vec2(-1.0, +1.0) * texcoordOffset)).xyz;\n  vec3 rgbSE = texture2D(textureMap, vertTexcoord.xy + (vec2(+1.0, +1.0) * texcoordOffset)).xyz;\n  vec3 rgbM  = texture2D(textureMap, vertTexcoord.xy).xyz;\n\t\n  vec3 luma = vec3(0.299, 0.587, 0.114);\n  float lumaNW = dot(rgbNW, luma);\n  float lumaNE = dot(rgbNE, luma);\n  float lumaSW = dot(rgbSW, luma);\n  float lumaSE = dot(rgbSE, luma);\n  float lumaM  = dot( rgbM, luma);\n\t\n  float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\n  float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\n\t\n  vec2 dir;\n  dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n  dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\t\n  float dirReduce = max(\n    (lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * FXAA_REDUCE_MUL),\n    FXAA_REDUCE_MIN\n  );\n\t  \n  float rcpDirMin = 1.0/(min(abs(dir.x), abs(dir.y)) + dirReduce);\n\t\n  dir = min(vec2(FXAA_SPAN_MAX,  FXAA_SPAN_MAX), \n        max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX), dir * rcpDirMin)) * texcoordOffset;\n\t\t\n  vec3 rgbA = (1.0/2.0) * (\n              texture2D(textureMap, vertTexcoord.xy + dir * (1.0/3.0 - 0.5)).xyz +\n              texture2D(textureMap, vertTexcoord.xy + dir * (2.0/3.0 - 0.5)).xyz);\n  vec3 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n              texture2D(textureMap, vertTexcoord.xy + dir * (0.0/3.0 - 0.5)).xyz +\n              texture2D(textureMap, vertTexcoord.xy + dir * (3.0/3.0 - 0.5)).xyz);\n  float lumaB = dot(rgbB, luma);\n\n  vec3 color;\n  if((lumaB < lumaMin) || (lumaB > lumaMax)) {\n    color = rgbA;\n  } else {\n    color = rgbB;\n  }\n  return color;\n}\n\n\nvoid main() {\n  vec3 color = funcFxaa();\n  float alpha = texture2D(textureMap, fragTexture).a;\n  gl_FragColor = vec4(color, alpha); \n}\n",attributes:["position","texture"],uniforms:["flipY","textureMap","resolution"]}}}]);