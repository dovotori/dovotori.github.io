(self.webpackChunkdovotori_portfolio=self.webpackChunkdovotori_portfolio||[]).push([[8514,7719],{57719:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});const n="\nattribute vec3 position;\nattribute vec2 texture;\nvarying vec2 fragTexture;\nuniform float flipY; // 1 ou -1\n\nvoid main() {\n  fragTexture = texture;\n  gl_Position = vec4(position.x, position.y * flipY, position.z, 1.0);\n}\n"},38514:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});const n={vertex:r(57719).default,fragment:"\nprecision mediump float;\nvarying vec2 fragTexture;\nuniform sampler2D textureMap;\nuniform float time;\nuniform float radius;\nuniform vec2 center; // coor texture 0 Ã  1\n\nvoid main() {\n\tfloat w = center.x - fragTexture.x;\n  float h = center.y - fragTexture.y;\n\tfloat distanceFromCenter = sqrt(w * w + h * h);\n\tfloat sinArg = distanceFromCenter * 1.0 - time * 1.0;\n  float slope = cos(sinArg);\n  float wave = slope * radius;\n  vec2 uv = fragTexture + normalize(vec2(w, h)) * wave;\n\tvec4 color = texture2D(textureMap, uv);\n  \n  // repere\n  // if (\n  //   fragTexture.y < center.y + 0.005 && fragTexture.y > center.y - 0.005 && \n  //   fragTexture.x < center.x + 0.005 && fragTexture.x > center.x - 0.005\n  // ) {\n\t//   gl_FragColor = vec4(1.0,0.0,0.0,1.0);\n  // } else {\n\t  gl_FragColor = color;\n  // }\n}\n",attributes:["position","texture"],uniforms:["flipY","textureMap","time","radius","center"]}}}]);