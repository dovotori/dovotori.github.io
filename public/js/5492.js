"use strict";(self.webpackChunkdovotori=self.webpackChunkdovotori||[]).push([[1014,5492],{51014:(t,n,e)=>{e.r(n),e.d(n,{default:()=>r});const r="\nattribute vec3 position;\nattribute vec2 texture;\nvarying vec2 fragTexture;\nuniform float flipY; // 1 ou -1\n\nvoid main() {\n  fragTexture = texture;\n  gl_Position = vec4(position.x, position.y * flipY, position.z, 1.0);\n}\n"},65492:(t,n,e)=>{e.r(n),e.d(n,{default:()=>r});const r={vertex:e(51014).default,fragment:"\nprecision mediump float;\n\nuniform sampler2D textureMap;\nuniform float time;\nuniform float delta; // 0 - 1\nvarying vec2 fragTexture;\n\nfloat sat( float t ) {\n\treturn clamp( t, 0.0, 1.0 );\n}\n\nvec2 sat( vec2 t ) {\n\treturn clamp( t, 0.0, 1.0 );\n}\n\nfloat remap  ( float t, float a, float b ) {\n\treturn sat( (t - a) / (b - a) );\n}\n\nfloat linterp( float t ) {\n\treturn sat( 1.0 - abs( 2.0*t - 1.0 ) );\n}\n\nvec3 spectrum_offset( float t ) {\n\tvec3 ret;\n\tfloat lo = step(t,0.5);\n\tfloat hi = 1.0-lo;\n\tfloat w = linterp( remap( t, 1.0/6.0, 5.0/6.0 ) );\n\tfloat neg_w = 1.0-w;\n\tret = vec3(lo,1.0,hi) * vec3(neg_w, w, neg_w);\n\treturn pow( ret, vec3(1.0/2.2) );\n}\n\nfloat rand( vec2 n ) {\n  return fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nfloat mytrunc( float x, float num_levels )\n{\n\treturn floor(x*num_levels) / num_levels;\n}\nvec2 mytrunc( vec2 x, float num_levels )\n{\n\treturn floor(x*num_levels) / num_levels;\n}\n\nvec4 applyGlitch(sampler2D tex, vec2 fragCoord, float GLITCH)\n{\n\tvec2 uv = fragCoord;\n\tfloat newtime = mod(time * 100.0, 32.0)/110.0; // + modelmat[0].x + modelmat[0].z;\n\t\n\tfloat gnm = sat( GLITCH );\n\tfloat rnd0 = rand( mytrunc( vec2(newtime, newtime), 6.0 ) );\n\tfloat r0 = sat((1.0-gnm)*0.7 + rnd0);\n\tfloat rnd1 = rand( vec2(mytrunc( uv.x, 10.0*r0 ), newtime) ); //horz\n\t//float r1 = 1.0f - sat( (1.0f-gnm)*0.5f + rnd1 );\n\tfloat r1 = 0.5 - 0.5 * gnm + rnd1;\n\tr1 = 1.0 - max( 0.0, ((r1<1.0) ? r1 : 0.9999999) ); //note: weird ass bug on old drivers\n\tfloat rnd2 = rand( vec2(mytrunc( uv.y, 40.0*r1 ), newtime) ); //vert\n\tfloat r2 = sat( rnd2 );\n\n\tfloat rnd3 = rand( vec2(mytrunc( uv.y, 10.0*r0 ), newtime) );\n\tfloat r3 = (1.0-sat(rnd3+0.8)) - 0.1;\n\n\tfloat pxrnd = rand( uv + newtime );\n\n\tfloat ofs = 0.05 * r2 * GLITCH * ( rnd0 > 0.5 ? 1.0 : -1.0 );\n\tofs += 0.5 * pxrnd * ofs;\n\n\tuv.y += 0.1 * r3 * GLITCH;\n\n  const int NUM_SAMPLES = 20;\n  const float RCP_NUM_SAMPLES_F = 1.0 / float(NUM_SAMPLES);\n    \n\tvec4 sum = vec4(0.0);\n\tvec3 wsum = vec3(0.0);\n\tfor(int i = 0; i < NUM_SAMPLES; i += 1) {\n\t\tfloat t = float(i) * RCP_NUM_SAMPLES_F;\n\t\tuv.x = sat( uv.x + ofs * t );\n\t\tvec4 samplecol = texture2D( tex, uv, -10.0 );\n\t\tvec3 s = spectrum_offset( t );\n\t\tsamplecol.rgb = samplecol.rgb * s;\n\t\tsum += samplecol;\n\t\twsum += s;\n\t}\n\tsum.rgb /= wsum;\n\tsum.a *= RCP_NUM_SAMPLES_F;\n\n\treturn sum;\n}\n\nvoid main() {\n\tgl_FragColor = applyGlitch(textureMap, fragTexture, delta);\n}\n",attributes:["position","texture"],uniforms:["flipY","textureMap","time","delta"]}}}]);