"use strict";(self.webpackChunkdovotori=self.webpackChunkdovotori||[]).push([[3332,5059,4251],{83332:(n,t,e)=>{e.r(t),e.d(t,{default:()=>a});var i=e(84251),o=e(75059);const a={vertex:`\nattribute vec3 position;\nattribute vec3 normale;\nattribute vec4 tangent;\nattribute vec2 texture;\n\nuniform mat4 projection;\nuniform mat4 model;\nuniform mat4 view;\nuniform mat3 normalMatrix;\nuniform float time;\nuniform sampler2D noiseMap;\nuniform sampler2D displacementMap;\n\nvarying vec3 fragPosition;\nvarying vec3 fragNormale;\nvarying vec2 fragTexture;\n\n${o.PI}\n${o.funcMap}\n\nvoid main() {\n  gl_PointSize = 2.0;\n\n  // float noise = texture2D(noiseMap, texture + vec2(time * 0.005)).x;\n\n  float SIZE = 0.1;\n  float fromCenterY = funcMap(texture.y, 0.0, 1.0, -SIZE, SIZE);\n  float wave = 1.0 + (funcMap(cos(fromCenterY * time), -1.0, 1.0, -PI / 2.0, PI / 2.0) * 0.2);\n\n  float frequency = texture2D(displacementMap, texture).a;\n  float displacement = frequency + wave;\n  \n  vec3 newPosition = position + normale * displacement;\n  if (position.x == 0.0 && position.z == 0.0) {\n    newPosition = position;\n  }\n  \n  fragPosition = normalize((view * model * vec4(newPosition, 1.0)).xyz);\n  fragNormale = normalMatrix * normalize(normale * displacement);\n  fragTexture = texture;\n\n  gl_Position = projection * view * model * vec4(newPosition, 1.0);\n}\n`,fragment:`\nprecision mediump float;\nvarying vec3 fragPosition;\nvarying vec3 fragNormale;\nvarying vec2 fragTexture;\n\nuniform sampler2D colorMap;\nuniform vec4 color;\nuniform float rough; \nuniform float metal;\n\n${i.uniformLights}\n${i.funcLightsColor}\n\nvoid main() {\n  vec3 texColor = texture2D(colorMap, fragTexture).xyz;\n  vec3 phong = funcLightsColor(\n    texColor,\n    vec3(1.0, 1.0, 1.0),\n    vec3(1.0, 1.0, 1.0),\n    fragNormale,\n    fragPosition\n  );\n  gl_FragColor = vec4(phong * vec3(3.0), 1.0);\n}\n`,attributes:["position","normale","texture","tangent"],uniforms:["projection","model","view","normalMatrix","noiseMap","colorMap","displacementMap","color","rough","metal","posLum","posEye","time"].concat((0,i.addLightLocations)())}},75059:(n,t,e)=>{e.r(t),e.d(t,{PI:()=>i,TWO_PI:()=>o,attributeColors:()=>a,funcGradiant:()=>c,funcGrain:()=>s,funcMap:()=>l,varyingColors:()=>r});const i="\n#define PI 3.14159265359\n",o="\n#define TWO_PI 6.28318530718\n",a="\nattribute vec3 ambiant;\nattribute vec3 diffuse;\nattribute vec3 specular;\nattribute float specDensity;\nattribute float opacity;\n",r="\nvarying vec3 fragAmbiant;\nvarying vec3 fragDiffuse;\nvarying vec3 fragSpecular;\nvarying float fragSpecDensity;\nvarying float fragOpacity;\n",l="\nfloat funcMap(float valeur, float minRef, float maxRef, float minDest, float maxDest) {\n  float result = minDest + (valeur - minRef) * (maxDest - minDest) / (maxRef - minRef);\n  if(result > maxDest){ result = maxDest; } else if(result < minDest){ result = minDest; }\n  return result;\n}\n",s="\nvec4 funcGrain(vec2 uv, float time, float strength) {\n  float x = (uv.x + 4.0 ) * (uv.y + 4.0 ) * (time * 10.0);\n  return vec4(mod((mod(x, 13.0) + 1.0) * (mod(x, 123.0) + 1.0), 0.01)-0.005) * strength;\n}\n",c=`\n${l}\nvec4 funcGradiant(vec4 color1, vec4 color2, float start, float end, float uvAxe) {\n  float mixValue = funcMap(uvAxe, start, end, 0.0, 1.0);\n  return mix(color1, color2, mixValue);\n}\n`},84251:(n,t,e)=>{e.r(t),e.d(t,{MAX_LIGHTS:()=>i,addLightLocations:()=>a,funcLightAttenuation:()=>l,funcLightConeAttenuation:()=>r,funcLightsColor:()=>c,funcPhong:()=>s,uniformLights:()=>o});const i=10,o=`\n#define MAX_LIGHTS ${i}\nuniform int numLights;\nuniform struct Light {\n   int type;\n   vec3 position;\n   vec3 ambiant;\n   vec3 diffuse;\n   vec3 specular;\n   float radius;\n   vec3 direction;\n   float strength;\n   float brillance;\n} lights[MAX_LIGHTS];\n`,a=()=>{const n=[];for(let t=0;t<i;t+=1)n.push(`lights[${t}].type`),n.push(`lights[${t}].position`),n.push(`lights[${t}].ambiant`),n.push(`lights[${t}].diffuse`),n.push(`lights[${t}].specular`),n.push(`lights[${t}].radius`),n.push(`lights[${t}].direction`),n.push(`lights[${t}].brillance`),n.push(`lights[${t}].strength`);return n.push("numLights"),n},r="\nfloat funcLightConeAttenuation(vec3 posLum, vec3 posDirection, vec3 normale, vec3 position) {\n  float intensity = 0.0;\n  float cutoff = 0.9;\n\n  vec3 lightDirection = normalize(posLum - position); \n  vec3 spotDirection = normalize(posDirection);\n\n  // inside the cone ?\n  if (dot(spotDirection, lightDirection) > cutoff) {\n\n    vec3 n = normalize(normale);\n    intensity = max(dot(n, lightDirection), 0.0);\n\n    // if (intensity > 0.0) {\n    // vec3 eye = normalize(DataIn.eye);\n    // vec3 h = normalize(lightDirection + eye);\n    // float intSpec = max(dot(h,n), 0.0);\n    // spec = specular * pow(intSpec, shininess);\n    // }\n  }\n  return intensity;\n}\n",l="\nfloat funcLightAttenuation(vec3 posLum, float radius, vec3 normale, vec3 position) {\n  float cutoff = 0.1;\n  vec3 lightDirection = posLum - position;\n  float distance = length(lightDirection);\n  float d = max(distance - radius, 0.0);\n  lightDirection /= distance;\n  float denom = d / radius + 1.0;\n  float attenuation = 1.0 / (denom * denom);\n    \n  attenuation = (attenuation - cutoff) / (1.0 - cutoff);\n  attenuation = max(attenuation, 0.0);\n\n  float dot = max(dot(lightDirection, normale), 0.0);\n  return attenuation * dot;\n}\n",s="\nvec3 funcPhong(\n  vec3 position,\n  vec3 normale,\n  vec3 ambiant,\n  vec3 diffuse,\n  vec3 specular,\n  vec3 posLum,\n  float brillance\n  ) {\n  vec3 N = normalize(normale);\n  vec3 L = normalize(posLum - position);\n\n  // Lambert's cosine law\n  float lambertian = max(dot(N, L), 0.0);\n\n  float specularValue = 0.0;\n  if(lambertian > 0.0) {\n    vec3 R = reflect(-L, N); // Reflected light vector\n    vec3 V = normalize(-position); // Vector to viewer\n    float specAngle = max(dot(R, V), 0.0);\n    specularValue = pow(specAngle, brillance);\n  }\n\n  return vec3(ambiant * ((lambertian * diffuse) + (specularValue * specular)));\n}\n",c=`\n${s}\n${r}\n${l}\nvec3 funcLightsColor(vec3 ambiant, vec3 diffuse, vec3 specular, vec3 normale, vec3 position) {\n  vec3 finalColor = vec3(0.0);\n  for(int i = 0; i < MAX_LIGHTS; i += 1) {\n    if(i < numLights) {\n      vec3 color = funcPhong(\n        position,\n        normale,\n        ambiant * (lights[i].ambiant * lights[i].strength),\n        diffuse * (lights[i].diffuse * lights[i].strength),\n        specular * (lights[i].specular * lights[i].strength),\n        lights[i].position,\n        lights[i].brillance\n      );\n      float att = 1.0;\n      if (lights[i].type == 1) {\n        att = funcLightAttenuation(lights[i].position, lights[i].radius, normale, position);\n      } else if (lights[i].type == 2) {\n        att = funcLightConeAttenuation(lights[i].position, lights[i].direction, normale, position);\n      }\n      color *= att;\n      finalColor += color;\n    }\n  }\n  finalColor /= vec3(numLights);\n  return finalColor;\n}\n`}}]);