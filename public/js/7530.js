"use strict";(self.webpackChunkdovotori=self.webpackChunkdovotori||[]).push([[7530],{27530:(o,n,t)=>{t.r(n),t.d(n,{default:()=>r});const r="\nstruct CameraUniform {\n  projection: mat4x4<f32>,\n  view: mat4x4<f32>,\n  model: mat4x4<f32>,\n  position: vec3<f32>,\n};\n@group(0) @binding(0)\nvar<uniform> camera: CameraUniform;\n@group(0) @binding(1)\nvar<uniform> shadowProjection: mat4x4<f32>;\n\nstruct TransformUniform {\n  model: mat4x4<f32>,\n  normal_matrix: mat3x3<f32>,\n  picking_color: vec4<f32>,\n};\n@group(1) @binding(0)\nvar<uniform> transform: TransformUniform;\n\nstruct VertexInput {\n  @location(0) position: vec3<f32>,\n  @location(1) normale: vec3<f32>,\n  @location(2) texture: vec2<f32>,\n  // @location(3) tangent: vec4<f32>,\n  @location(3) faceColor: f32,\n}\n\nstruct VertexOutput {\n  @builtin(position) clip_position: vec4<f32>,\n  @location(0) world_position: vec3f,\n  @location(1) world_normal: vec3f,\n  @location(2) texture: vec2f,\n  @location(3) camera_position: vec3f,\n  @location(4) shadow_pos: vec3<f32>,\n  @location(5) picking_color: vec4<f32>,\n  @location(6) face_color: f32,\n}\n\n@vertex\nfn v_main(\n  in: VertexInput,\n) -> VertexOutput {\n  var out: VertexOutput;\n  var world_position: vec4<f32> = transform.model * vec4<f32>(in.position, 1.0);\n\n  out.world_position = world_position.xyz;\n  out.world_normal = normalize(transform.normal_matrix * in.normale); // normalize is important to have correct normal\n\n  out.clip_position = camera.projection * camera.view * camera.model * world_position;\n  out.texture = in.texture;\n  out.camera_position = camera.position;\n\n  var posFromLight: vec4<f32> = shadowProjection * camera.model * world_position;\n  // Convert shadowPos XY to (0, 1) to fit texture UV\n  out.shadow_pos = vec3<f32>(posFromLight.xy * vec2<f32>(0.5, -0.5) + vec2<f32>(0.5, 0.5), posFromLight.z);\n\n  out.picking_color = transform.picking_color;\n  out.face_color = in.faceColor;\n\n  return out;\n}\n"}}]);