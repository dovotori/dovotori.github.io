(window.webpackJsonp=window.webpackJsonp||[]).push([[76,95],{186:function(t,n,o){"use strict";o.r(n),n.default="\nattribute vec3 position;\nattribute vec2 texture;\nvarying vec2 fragTexture;\nuniform float flipY; // 1 ou -1\n\nvoid main() {\n  fragTexture = texture;\n  gl_Position = vec4(position.x, position.y * flipY, position.z, 1.0);\n}\n"},277:function(t,n,o){"use strict";o.r(n);var e=o(186);n.default={vertex:e.default,fragment:"\nprecision mediump float;\n\nuniform vec2 resolution;\nuniform float time;\n\nvarying vec2 fragTexture;\n\nconst float coeiff = 0.25;\nconst vec3 totalSkyLight = vec3(0.3, 0.5, 1.0);\n\nvec3 mie(float dist, vec3 sunL) {\n  return max(exp(-pow(dist, 0.25)) * sunL - 0.4, 0.0);\n}\n\nvec3 getSky(vec2 uv, float time) {\n\tvec2 sunPos = vec2(0.5, cos(time * 0.3 + 3.14 * 0.564));  \n  float sunDistance = distance(uv, clamp(sunPos, -1.0, 1.0));\n\t\n\tfloat scatterMult = clamp(sunDistance, 0.0, 1.0);\n\tfloat sun = clamp(1.0 - smoothstep(0.01, 0.011, scatterMult), 0.0, 1.0);\n\t\n\tfloat dist = uv.y;\n\tdist = (coeiff * mix(scatterMult, 1.0, dist)) / dist;\n    \n  vec3 mieScatter = mie(sunDistance, vec3(1.0));\n\t\n\tvec3 color = dist * totalSkyLight;\n    \n  color = max(color, 0.0);\n    \n\tcolor = max(mix(pow(color, 1.0 - color),\n\tcolor / (2.0 * color + 0.5 - color),\n\tclamp(sunPos.y * 2.0, 0.0, 1.0)),0.0)\n\t+ sun + mieScatter;\n\t\n\tcolor *=  (pow(1.0 - scatterMult, 10.0) * 10.0) + 1.0;\n\t\n\tfloat underscatter = distance(sunPos.y * 0.5 + 0.5, 1.0);\n\t\n\tcolor = mix(color, vec3(0.0), clamp(underscatter, 0.0, 1.0));\n\treturn color;\t\n}\n\nvoid main(){\n  vec2 uv = -1.0 + 2.0 * fragTexture;\n\tvec3 color = getSky(uv, time);\n\tcolor = color / (2.0 * color + 0.5 - color);\n\tgl_FragColor = vec4(color, 1.0);\n}\n",attributes:["position","texture"],uniforms:["flipY","resolution","time"]}}}]);