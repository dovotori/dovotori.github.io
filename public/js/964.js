"use strict";(self.webpackChunkdovotori=self.webpackChunkdovotori||[]).push([[964,1014],{51014:(e,t,o)=>{o.r(t),o.d(t,{default:()=>n});const n="\nattribute vec3 position;\nattribute vec2 texture;\nvarying vec2 fragTexture;\nuniform float flipY; // 1 ou -1\n\nvoid main() {\n  fragTexture = texture;\n  gl_Position = vec4(position.x, position.y * flipY, position.z, 1.0);\n}\n"},20964:(e,t,o)=>{o.r(t),o.d(t,{default:()=>n});const n={vertex:o(51014).default,fragment:"\nprecision mediump float;\nvarying vec2 fragTexture;\nuniform sampler2D textureMap;\nuniform float time;\nuniform vec2 mouse;\nuniform float scale;\n\nvoid main() {\n  vec4 color = texture2D(textureMap, fragTexture);\n\n  float speed = .1;\n  vec2 p = fragTexture * scale;   \n  for(int i = 1; i < 10; i++){\n    p.x += 0.3 / float(i) * sin(float(i) * 3. * p.y + time * speed) + mouse.x / 1000.;\n    p.y += 0.3 / float(i) * cos(float(i) * 3. * p.x + time * speed) + mouse.y / 1000.;\n  }\n  float r = cos(p.x + p.y + 1.) * .5 + .5;\n  // float g = sin(p.x + p.y + 1.) * .5 + .5;\n  // float b = (sin(p.x + p.y) + cos(p.x + p.y)) * .5 + .5;\n  // vec3 watercolor = vec3(r, g, b);\n\n  gl_FragColor = vec4(color.xyz * r, color.a);\n}",attributes:["position","texture"],uniforms:["flipY","textureMap","mouse","time","scale"]}}}]);