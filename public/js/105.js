(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{195:function(n,o,t){"use strict";t.r(o),t.d(o,"funcShadow",(function(){return a})),t.d(o,"uniformVertShadow",(function(){return s})),t.d(o,"uniformFragShadow",(function(){return e})),t.d(o,"shadowLocations",(function(){return i}));var a="\nfloat funcShadow(\n  vec4 pos, \n  vec2 resolution, \n  float lambertCosinus\n) {\n  if (pos.z > 1.0) {\n    return 1.0; // outside light frustum, ignore\n  }\n\n  float bias = max(shadowEpsilon * (1.0 - lambertCosinus), shadowEpsilon * 0.01);\n  vec2 texelSize = 1.0 / resolution;\n\n  // PCF (percentage closer filter)\n  float shadow = 0.0;\n  for(float y = -1.0; y <= 1.0; y += 1.0) {\n    for(float x = -1.0; x <= 1.0; x += 1.0) {\n      float depth = texture2D(shadowMap, pos.xy + vec2(x,y) * texelSize).r;\n      shadow += (depth + bias) < pos.z ? 0.0 : 1.0;\n    } \n  }\n  shadow /= 9.0;\n  return (shadow * lambertCosinus) + lighten;\n}\n",s="\nuniform mat4 shadowView;\nuniform mat4 shadowProjection;\n\nconst mat4 bias = mat4(\n  0.5, 0.0, 0.0, 0.0,\n  0.0, 0.5, 0.0, 0.0,\n  0.0, 0.0, 0.5, 0.0,\n  0.5, 0.5, 0.5, 1.0\n);\n",e="\nuniform sampler2D shadowMap;\nuniform float shadowEpsilon;\nuniform float lighten;\nuniform vec3 posLum;\n",i=["shadowView","shadowProjection","shadowMap","lighten","posLum"]}}]);