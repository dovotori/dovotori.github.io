import fast from"../../labo/lib/fastcorner";import Delaunay from"../../labo/lib/delaunay";const getGrayScaleBuffer=(e,t,a)=>{const r=new Uint8Array(t*a);let o=0;for(let l=0;l<a;l++)for(let a=0;a<t;a++){const n=t*l+a<<2,s=(e[n]>>2)+(e[n+1]>>1)+(e[n+2]>>2);r[o++]=s}return r},computeArea=(e,t,a,r,o,l)=>Math.abs((e*(r-l)+a*(l-t)+o*(t-r))/2),isInside=(e,t,a,r,o,l,n,s)=>computeArea(e,t,a,r,o,l)===computeArea(n,s,a,r,o,l)+computeArea(e,t,n,s,o,l)+computeArea(e,t,a,r,n,s),getColorPixelFromBuffer=(e,t,a,r)=>{const o=4*(r*Math.max(0,a-1)+t);return e.subarray(o,o+4).values()},getAverageColorOnTriangle=(e,t,a,r,o,l,n,s)=>{const u=Math.max(t,Math.max(r,l)),c=Math.min(t,Math.min(r,l)),h=Math.max(a,Math.max(o,n)),i=Math.min(a,Math.min(o,n)),m={r:0,g:0,b:0};let g=0;for(let f=c;f<=u;f++)for(let u=i;u<=h;u++)if(isInside(t,a,r,o,l,n,f,u)){const t=getColorPixelFromBuffer(e,f,u,s);m.r+=t.next().value,m.g+=t.next().value,m.b+=t.next().value,g++}return m.r/=g,m.g/=g,m.b/=g,m},computeDelaunay=({data:e,width:t,height:a,threshold:r})=>{const o=getGrayScaleBuffer(e,t,a),l=fast.detect(o,t,a,r,!0),n=l.reduce(((e,t)=>(e.push([t.x,t.y]),e)),[]);n.push([0,0],[t-1,0],[0,a-1],[t-1,a-1]);const s=Delaunay.triangulate(n),u=[];for(let a=0;a<s.length;a+=3){const r=n[s[a]][0],o=n[s[a]][1],l=n[s[a+1]][0],c=n[s[a+1]][1],h=n[s[a+2]][0],i=n[s[a+2]][1],m=getAverageColorOnTriangle(e,r,o,l,c,h,i,t);u.push({x0:r,y0:o,x1:l,y1:c,x2:h,y2:i,color:m})}return{coors:u,width:t,height:a,corners:l}},computeColor=({data:e,width:t,height:a,green:r,red:o,blue:l,bright:n,grey:s})=>{const u=e;for(let t=0;t<=e.length;t+=4){const a=e[t]*o,c=e[t+1]*r,h=e[t+2]*l,i=Math.min(Number.parseInt(a+c+h/3,10),255);s&&(u[t]=i,u[t+1]=i,u[t+2]=i),u[t]*=n,u[t+1]*=n,u[t+2]*=n}return{buffer:u,width:t,height:a}};self.onmessage=e=>{const{type:t,payload:a,id:r}=e.data;let o=null;switch(t){case"delaunay":o=computeDelaunay(a);break;case"color":o=computeColor(a)}self.postMessage({type:t,id:r,payload:o})};