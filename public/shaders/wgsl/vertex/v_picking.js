export default"\nstruct CameraUniform {\n  projection: mat4x4<f32>,\n  view: mat4x4<f32>,\n  model: mat4x4<f32>,\n  position: vec3<f32>,\n};\n\n@group(0) @binding(0)\nvar<uniform> camera: CameraUniform;\n\nstruct TransformUniform {\n  model: mat4x4<f32>,\n  normal_matrix: mat3x3<f32>,\n  color_picking: vec4<f32>,\n};\n\n@group(1) @binding(0)\nvar<uniform> transform: TransformUniform;\n\nstruct VertexInput {\n  @location(0) position: vec3<f32>,\n  @location(1) normale: vec3<f32>,\n  @location(2) texture: vec2<f32>,\n  @location(3) faceColor: f32,\n}\n\nstruct VertexOutput {\n  @builtin(position) clip_position: vec4<f32>,\n  @location(0) color_picking: vec4f,\n}\n\n@vertex\nfn v_main(\n  in: VertexInput,\n) -> VertexOutput {\n  var out: VertexOutput;\n  var world_position: vec4<f32> = transform.model * vec4<f32>(in.position, 1.0);\n\n  // out.color_picking = transform.color_picking;\n  out.color_picking = vec4(transform.color_picking.x, in.faceColor, 0.0, 1.0);\n\n  out.clip_position = camera.projection * camera.view * camera.model * world_position;\n\n  return out;\n}\n";