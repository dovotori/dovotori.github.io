import vertex from"./basicVertex";import{funcBlur2}from"../utils/blur";const fragment=`\nprecision mediump float;\nvarying vec2 fragTexture;\nuniform sampler2D textureMap;\nuniform sampler2D depthMap; // depth\nuniform vec2 resolution;\nuniform vec2 range; // near far\nuniform float focusDistance;\nuniform float blur;\nuniform float ppm;\n\n#define MAX_BLUR 20.0\n\n${funcBlur2}\n\nvoid main() {\n  vec2 resolution = vec2(resolution) - vec2(1.0);\n  float ndc = 2.0 * texture2D(depthMap, fragTexture).r - 1.0;\n  float depth = -(2.0 * range.y * range.x) / (ndc * (range.y - range.x) - range.y - range.x);\n  float deltaDepth = abs(focusDistance - depth) * 0.6;\n  \n  // Blur more quickly in the foreground.\n  float xdd = depth < focusDistance\n    ? abs(focusDistance - deltaDepth) : abs(focusDistance + deltaDepth);\n  float blurRadius = min(floor(blur * (deltaDepth / xdd) * ppm), MAX_BLUR);\n  \n  vec4 color = vec4(0.0);\n  if (blurRadius > 1.0) {\n    color = funcBlur(textureMap, fragTexture, resolution, vec2(blurRadius * 0.1, 0.0));\n  } else {\n    color = texture2D(textureMap, fragTexture);\n  }\n  float fog = (1.0 - texture2D(depthMap, fragTexture).r) * (range.y - range.x);\n  gl_FragColor = color * fog;\n}\n`;export default{vertex,fragment,attributes:["position","texture"],uniforms:["flipY","textureMap","depthMap","resolution","range","focusDistance","blur","ppm"]};