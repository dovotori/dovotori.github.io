import{PI}from"../utils";import vertex from"./basicVertex";const fragment=`\nprecision mediump float;\n\nuniform sampler2D textureMap;\nuniform float time;\n\nvarying vec2 fragTexture;\n\n${PI}\n\nmat2 rot(float th){ float cs = cos(th), si = sin(th); return mat2(cs, -si, si, cs); }\n\n#define SHARP_X 4.0\n#define SHARP_Y 4.0\n\nvoid main() {\n\tvec2 p = fragTexture * 2.0 - 1.0;\n\n  float rotZ = PI * 0.25;\n  p *= rot(rotZ);\n\n  float a = atan(p.y, p.x);\n  float r = pow(pow(p.x * p.x, SHARP_X) + pow(p.y * p.y, SHARP_Y), 1.0 / 8.0);\n  \n  // index texture by (animated inverse) radious and angle\n  vec2 uv = vec2( 0.3 / r + 0.2 * time, a / PI);\n\n  vec4 color = vec4(0.5, 0.3, 0.6, 0.0);\n  \n  if (fragTexture.y > 0.5) {\n    float stripX = mod(uv.y, 0.1);\n    if (stripX > 0.0 && stripX < 0.005) {\n      color.a = cos(uv.x * 2.0) * 6.0;\n    }\n\n    float stripX2 = 0.1 + mod(uv.y, 0.2);\n    if (stripX2 > 0.15 && stripX2 < 0.155) {\n      color.a = sin(uv.x) * 4.0;\n    }\n  }\n\n  // color.xyz *= r; // darken at the center   \n\tgl_FragColor = color;\n}\n`;export default{vertex,fragment,attributes:["position","texture"],uniforms:["flipY","textureMap","time"]};