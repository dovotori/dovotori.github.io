import vertex from"./basicVertex";import{funcRandRange}from"../utils/random";const fragment=`\nprecision mediump float;\n\nuniform sampler2D textureMap;\nuniform float time;\nuniform float delta; // 0 - 1 glitch amount\nuniform float speed; // 0 - 1 speed\nvarying vec2 fragTexture;\n\n${funcRandRange}\n\n// return 1 if v inside 1d range\nfloat insideRange(float v, float bottom, float top) {\n  return step(bottom, v) - step(top, v);\n}\n   \nvec4 applyGlitch(sampler2D tex, vec2 uv, float speed, float AMT) {\n  float time = floor(time * speed * 60.0);    \n  vec4 outCol = texture2D(tex, uv);\n    \n  // randomly offset slices horizontally\n  float maxOffset = AMT / 2.0;\n  const float LIMIT =  2.0;\n  for (float i = 0.0; i < LIMIT; i += 1.0) {\n    float sliceY = rand(vec2(time , 2345.0 + float(i)));\n    float sliceH = rand(vec2(time , 9035.0 + float(i))) * 0.25;\n    float hOffset = randomRange(vec2(time , 9625.0 + float(i)), -maxOffset, maxOffset);\n    vec2 uvOff = uv;\n    uvOff.x += hOffset;\n    if (insideRange(uv.y, sliceY, fract(sliceY+sliceH)) == 1.0 ){\n      outCol = texture2D(tex, uvOff);\n    }\n  }\n    \n  // do slight offset on one entire channel\n  float maxColOffset = AMT / 6.0;\n  float rnd = rand(vec2(time , 9545.0));\n  vec2 colOffset = vec2(randomRange(vec2(time , 9545.0), -maxColOffset,maxColOffset), \n                      randomRange(vec2(time , 7205.0), -maxColOffset,maxColOffset));\n  if (rnd < 0.33) {\n    outCol.r = texture2D(tex, uv + colOffset).r;  \n  } else if (rnd < 0.66){\n    outCol.g = texture2D(tex, uv + colOffset).g;  \n  } else {\n    outCol.b = texture2D(tex, uv + colOffset).b;  \n  }\n\n\treturn vec4(outCol);\n}\n\nvoid main() {\n\tgl_FragColor = applyGlitch(textureMap, fragTexture, speed, delta);\n}\n`;export default{vertex,fragment,attributes:["position","texture"],uniforms:["flipY","textureMap","time","delta","speed"]};