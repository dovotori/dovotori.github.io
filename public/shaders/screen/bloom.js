import vertex from"./basicVertex";const fragment="\nprecision mediump float;\n\nvarying vec2 fragTexture;\n\nuniform sampler2D textureMap;\nuniform float scale;\nuniform float threshold;\n\nfloat kernel = .005;\n\nvoid main() {\n  vec4 sum = vec4(0.0);\n\n  // mess of for loops due to gpu compiler/hardware limitations\n  int j=-2;\n  for( int i=-2; i<=2; i++) sum+=texture2D(textureMap, fragTexture + vec2(i,j) * kernel);\n  j=-1;\n  for( int i=-2; i<=2; i++) sum+=texture2D(textureMap, fragTexture + vec2(i,j) * kernel);\n  j=0;\n  for( int i=-2; i<=2; i++) sum+=texture2D(textureMap, fragTexture + vec2(i,j) * kernel);\n  j=1;\n  for( int i=-2; i<=2; i++) sum+=texture2D(textureMap, fragTexture + vec2(i,j) * kernel);\n  j=2;\n  for( int i=-2; i<=2; i++) sum+=texture2D(textureMap, fragTexture + vec2(i,j) * kernel);\n  sum /= 25.0;\n\n\n  // WITH ALPHA\n  // vec4 s = texture2D(textureMap, fragTexture);\n  // gl_FragColor = s;\n  // // use the blurred colour if it's bright enough\n  // if (length(sum) > threshold) {\n  //   gl_FragColor += sum * scale;\n  // }\n\n  vec3 color = texture2D(textureMap, fragTexture).xyz;\n  if (length(sum) > threshold) {\n    color += sum.xyz * scale;\n  }\n  gl_FragColor = vec4(color, 1.0);\n}\n";export default{vertex,fragment,attributes:["position","texture"],uniforms:["flipY","textureMap","scale","threshold"]};