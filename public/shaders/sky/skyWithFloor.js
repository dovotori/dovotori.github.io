import getSunSky from"./getSunSky";import vertex from"../screen/basicVertex";const fragment=`\nprecision mediump float;\n\nuniform vec2 resolution;\nuniform float time;\n\nvarying vec2 fragTexture;\n\n${getSunSky}\n\nfloat checker(vec2 p) {\n  p = mod(floor(p), 2.0);\n  return mod(p.x + p.y, 2.0) < 1.0 ? 0.25 : 0.1;\n}\n\nvec3 sky(vec2 uv, vec2 resolution) {\n  // Screen coords\n\tvec2 q = uv; // / resolution;\n\tvec2 v = -1.0 + 2.0 * q;\n\t// v.x *= resolution.x / resolution.y;\n\t\n  float horizonY = v.y - 0.05;\n\n\t// Camera ray\n\tvec3 dir = normalize(vec3(v.x, horizonY, 1.5));\n\t\n  vec3 colorFloor = vec3(0.0, 0.0, 0.1);\n  // vec3 colorFloor = vec3(checker(dir.xz / dir.y * 0.5 + vec2(0.0, -time * 2.0)));\n  // vec3 colorReflect = getSunSky(reflect(dir, vec3(0.0, 1.0, 0.0)));\n\n  vec3 colorSky = getSunSky(uv);\n\n  // Scene\n  float mixRatio = exp(-max(-horizonY, 0.0));\n  vec3 color = mix(colorFloor, colorSky, mixRatio);\n\n  // Vignetting\n\t// color *= 0.7 + 0.3 * pow(q.x * q.y * (1.0 - q.x) * (1.0 - q.y) * 16.0, 0.1);\n        \n\treturn color;\n}\n\nvoid main() {\n  vec3 color = sky(fragTexture, resolution);\n  gl_FragColor = vec4(color, 1.0);\n}\n`;export default{vertex,fragment,attributes:["position","texture"],uniforms:["flipY","resolution","time"]};