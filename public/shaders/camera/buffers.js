import{funcPBR,locationsPBR}from"../utils/pbr";const vertex="\nattribute vec3 position;\nattribute vec3 normale;\nuniform mat4 projection;\nuniform mat4 view;\nuniform mat4 model;\nuniform mat3 normalMatrix;\n\nvarying vec3 fragPosition;\nvarying vec3 fragNormale;\n\nvoid main() {\n  vec4 PVMpos = view * model * vec4(position, 1.0);\n  fragPosition = PVMpos.xyz;\n  fragNormale = normale; // normalize(normalMatrix * normale);\n  gl_Position = projection * PVMpos;\n}\n",fragment=`\nprecision mediump float;\n\nuniform int type;\n\nvarying vec3 fragPosition;\nvarying vec3 fragNormale;\nuniform vec3 posEye;\n\n${funcPBR}\n\nvoid main() {\n  vec4 color;\n  if (type == 1) {\n\t\tcolor = vec4(fragNormale, 1.0);\n\t} else if (type == 2) {\n\t\tcolor = vec4(fragPosition, 1.0);\n  } else {\n    vec3 pbr = funcPBR(fragPosition, fragNormale, posEye);\n\t\tcolor = vec4(pbr, 1.0);\n  }\n  gl_FragColor = color;\n}\n`;export default{vertex,fragment,attributes:["position","texture","normale"],uniforms:["projection","model","view","normalMatrix","type","resolution","posEye"].concat(locationsPBR)};