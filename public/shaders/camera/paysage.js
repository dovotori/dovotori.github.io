import{funcLightsColor}from"../utils/light";import{funcPBR,PBRLocations}from"../utils/pbr";import{uniformVertShadow,uniformFragShadow,funcShadow,shadowLocations}from"../utils/shadow";import{funcLightsToon}from"../utils/toon";const vertex=`\nattribute vec3 position;\nattribute vec3 normale;\n\nuniform mat4 projection;\nuniform mat4 view;\nuniform mat4 model;\nuniform mat4 inverseModel;\nuniform mat3 normalMatrix;\n\nvarying vec3 fragPosition;\nvarying vec3 fragNormale;\nvarying vec4 fragShadow;\nvarying vec3 fragTransformPosition;\n\n${uniformVertShadow}\n\nvoid main()\n{\n  fragPosition = normalize((view * model * vec4(position, 1.0)).xyz);\n  fragNormale = normalMatrix * normalize(normale);\n  fragShadow = bias * shadowProjection * shadowView * model * vec4(position, 1.0);\n  fragTransformPosition = (projection * view * inverseModel * model * vec4(position, 1.0)).xyz;\n  gl_Position = projection * view * model * vec4(position, 1.0);\n}\n`,fragment=`\nprecision mediump float;\n\nuniform vec2 resolution;\nuniform vec3 posEye;\n\n${uniformFragShadow}\n\nvarying vec3 fragPosition;\nvarying vec3 fragNormale;\nvarying vec4 fragShadow;\nvarying vec3 fragTransformPosition;\n\n${funcPBR}\n${funcShadow}\n${funcLightsColor}\n\nvoid main() {\n  if (\n    fragTransformPosition.z < -10.0 || fragTransformPosition.z > 8.0 ||\n    fragTransformPosition.x > 10.0 || fragTransformPosition.x < -8.0\n  ) {\n    gl_FragColor = vec4(0.0);\n  } else {\n    // vec3 phong = funcLightsColor(\n    //   color.xyz,\n    //   vec3(1.0,1.0,1.0),\n    //   vec3(1.0,1.0,1.0),\n    //   fragNormale,\n    //   fragPosition\n    // );\n    vec3 pbr = funcPBR(fragPosition, fragNormale, posEye);\n    // float shadow = funcShadow(fragShadow, resolution, lambertCosinus);\n    gl_FragColor = vec4(pbr, 1.0);\n    // gl_FragColor = vec4(vec3(shadow), 1.0);\n\n    // vec3 colorToon = funcLightsToon(color.xyz, fragPosition, fragNormale);\n    // gl_FragColor = vec4(colorToon, 1.0);\n  }\n}\n`;export default{vertex,fragment,attributes:["position","normale"],uniforms:["projection","view","model","inverseModel","normalMatrix","resolution","ambiantMap","posEye"].concat(PBRLocations).concat(shadowLocations)};