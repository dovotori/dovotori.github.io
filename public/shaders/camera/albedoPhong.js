import{uniformLights,addLightLocations,funcLightsColor}from"../utils/light";const vertex="\nattribute vec3 position;\nattribute vec3 normale;\nattribute vec3 ambiant;\nattribute vec3 diffuse;\nuniform mat4 projection;\nuniform mat4 model;\nuniform mat4 view;\nuniform mat3 normalMatrix;\n\nvarying vec3 fragAmbiant;\nvarying vec3 fragDiffuse;\nvarying vec3 fragPosition;\nvarying vec3 fragNormale;\n\nvoid main() {\n  fragAmbiant = ambiant;\n  fragDiffuse = diffuse;\n  fragPosition = (view * model * vec4(position, 1.0)).xyz;\n  fragNormale = normalMatrix * normale;\n  gl_Position = projection * view * model * vec4(position, 1.0);\n}\n",fragment=`\nprecision mediump float;\n\nvarying vec3 fragAmbiant;\nvarying vec3 fragDiffuse;\nvarying vec3 fragPosition;\nvarying vec3 fragNormale;\n\n${uniformLights}\n\n${funcLightsColor}\n\nvoid main() {\n  vec3 color = funcLightsColor(\n    fragAmbiant,\n    fragDiffuse,\n    vec3(1.0),\n    fragNormale,\n    fragPosition\n  );\n  gl_FragColor = vec4(color, 1.0);\n  // gl_FragColor = vec4(lights[0].position, 1.0);\n  // gl_FragColor = vec4(normalize(fragNormale), 1.0);\n}\n`;export default{vertex,fragment,attributes:["position","normale","ambiant","diffuse"],uniforms:["projection","model","view","normalMatrix"].concat(addLightLocations())};