import{PI,funcMap}from"../utils";import funcRoadDistortion from"../utils/roadDistortion";const vertex=`\nattribute vec3 position;\nuniform mat4 projection;\nuniform mat4 model;\nuniform mat4 view;\n\nuniform float time;\nuniform float roadLength;\nuniform float roadWidth;\nuniform vec3 amplitude;\nuniform vec3 frequence;\n\nvarying vec3 fragPosition;\nvarying float fragDepth;\n\n${PI}\n${funcMap}\n${funcRoadDistortion}\n\nvoid main() {\n  vec3 transformed = position.xyz;\n  \n  vec3 distortion  = getDistortion(transformed.z / roadLength, frequence, amplitude, time);\n\n  transformed.x += distortion.x;\n  transformed.z += distortion.y;\n  transformed.y += -1.0 * distortion.z; \n  transformed.y -= 0.01; // place a little lower than road\n\n  float height = 0.0;\n  float gapLength = roadWidth + 4.0;\n  if (position.x > gapLength) {\n    height += funcMap(position.x, 5.0, 120.0, 1.0, 2.0);\n  } else if (position.x < -gapLength) {\n    height += funcMap(position.x, -120.0, -5.0, 1.0, 2.0);\n  }\n  if (position.x > gapLength + 2.0) {\n    height += (0.2 + cos(position.z * 0.1)) * 0.5;\n    height += (0.2 + cos(position.x * 0.1)) * 2.0;\n  } else if (position.x < -gapLength + 2.0) {\n    height += (0.2 + cos(position.z * 0.1)) * 2.0;\n    height += (0.2 + cos(position.x * 0.1)) * 0.5;\n  }\n  transformed.y += height;\n\n  fragPosition = vec3(height / 4.0);\n  fragDepth = 1.0 - smoothstep(10.0, roadLength * 8.0, transformed.z);\n  // fragDepth = 1.0 - (transformed.z * 0.2 / roadLength);\n\n  gl_Position = projection * view * model * vec4(transformed, 1.0);\n}\n`,fragment="\nprecision mediump float;\n\nvarying vec3 fragPosition;\nvarying float fragDepth;\n\nvoid main() {\n  vec3 roadColor1 = vec3(13.0 / 255.0, 7.1 / 255.0, 32.9 / 255.0);\n  vec3 color = roadColor1 * (1.0 - fragPosition.y);\n  gl_FragColor = vec4(fragPosition, fragDepth);\n}\n";export default{vertex,fragment,attributes:["position"],uniforms:["projection","model","view","time","roadLength","roadWidth","frequence","amplitude"]};