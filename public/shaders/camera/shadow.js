import{uniformVertShadow,uniformFragShadow,funcShadow,shadowLocations}from"../utils/shadow";const vertex=`\nattribute vec3 position;\nattribute vec3 normale;\nattribute vec2 texture;\n\nuniform mat4 projection;\nuniform mat4 view;\nuniform mat4 model;\nuniform mat3 normalMatrix;\n\n${uniformVertShadow}\n\nvarying vec3 fragPosition;\nvarying vec4 fragShadow;\nvarying vec3 fragNormale;\nvarying vec2 fragTexture;\n\nvoid main() {\n  fragShadow = bias * shadowProjection * shadowView * model * vec4(position, 1.0);\n  fragNormale = normalMatrix * normale;\n  fragTexture = texture;\n  fragPosition = normalize((view * model * vec4(position, 1.0)).xyz);\n  gl_Position = projection * view * model * vec4(position, 1.0);\n}\n`,fragment=`\nprecision mediump float;\n\n${uniformFragShadow}\n\nuniform vec2 resolution;\n\nvarying vec3 fragPosition;\nvarying vec4 fragShadow;\nvarying vec3 fragNormale;\nvarying vec2 fragTexture;\n\n${funcShadow}\n\nvoid main() {\n  vec3 N = normalize(fragNormale);\n  vec3 L = normalize(posLum - fragPosition);\n  float lambertCosinus = max(dot(N, L), 0.0);\n  \n  float shadow = funcShadow(fragShadow, resolution, lambertCosinus);\n  gl_FragColor = vec4(vec3(shadow), 1.0);\n}\n`;export default{vertex,fragment,attributes:["position","texture","normale"],uniforms:["projection","model","view","normalMatrix","resolution"].concat(shadowLocations)};