import{uniformLights}from"../utils/light";import{PBRLocations,uniformPBR}from"../utils/pbr";import{funcLightsToon}from"../utils/toon";const vertex="\nattribute vec3 position;\nattribute vec3 normale;\nattribute vec4 tangent;\nuniform mat4 projection;\nuniform mat4 model;\nuniform mat4 view;\nuniform mat3 normalMatrix;\n\nvarying vec3 fragPosition;\nvarying vec3 fragNormale;\n\nvoid main() {\n  vec4 VMpos = view * model * vec4(position, 1.0);\n  fragPosition = normalize(VMpos.xyz);\n  fragNormale = normalize(normalMatrix * normale);\n  gl_Position = projection * VMpos;\n}\n",fragment=`\nprecision mediump float;\nvarying vec3 fragPosition;\nvarying vec3 fragNormale;\n\nuniform vec3 posEye;\n\n${uniformLights}\n${uniformPBR}\n${funcLightsToon}\n\nvoid main() {\n  // vec3 phong = funcLightsColor(\n  //   color.xyz, vec3(1.0,1.0,1.0), vec3(1.0,1.0,1.0), fragNormale, fragPosition\n  // );\n  // gl_FragColor = vec4(phong, 1.0);\n\n  // vec3 colorPbr = funcPBR(fragPosition, fragNormale, posEye);\n  // gl_FragColor = vec4(colorPbr, 1.0);\n  \n  vec3 colorToon = funcLightsToon(color.xyz, fragPosition, fragNormale);\n  gl_FragColor = vec4(colorToon, 1.0);\n}\n`;export default{vertex,fragment,attributes:["position","normale","tangent"],uniforms:["projection","model","view","normalMatrix","posEye"].concat(PBRLocations)};