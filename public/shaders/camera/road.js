import{PI}from"../utils";import funcRoadDistortion from"../utils/roadDistortion";const vertex=`\nattribute vec3 position;\nuniform mat4 projection;\nuniform mat4 model;\nuniform mat4 view;\n\nuniform float time;\nuniform float roadLength;\nuniform vec3 amplitude;\nuniform vec3 frequence;\n\nvarying vec3 fragPosition;\nvarying float depth;\n\n${PI}\n${funcRoadDistortion}\n\nvoid main() {\n  vec3 transformed = position.xyz;\n  \n  fragPosition = position;\n  depth = 1.0 - (transformed.z * 0.2 / roadLength);\n\n  vec3 distortion = getDistortion(transformed.z / roadLength, frequence, amplitude, time);\n  // vec3 distortion = vec3(0.0);\n\n  transformed.x += distortion.x;\n  transformed.z += distortion.y;\n  transformed.y += -1.0 * distortion.z;  \n  \n  gl_Position = projection * view * model * vec4(transformed, 1.0);\n}\n`,fragment="\nprecision mediump float;\n\nvarying vec3 fragPosition;\nvarying float depth;\n\nuniform float roadWidth;\n\nvoid main() {\n  vec3 roadColor1 = vec3(13.0 / 255.0, 7.1 / 255.0, 32.9 / 255.0);\n  vec3 roadColor2 = vec3(193.0 / 255.0, 2.0 / 255.0, 117.0 / 255.0);\n  float lineWidth = 0.05;\n\n  vec3 color = roadColor1;\n  vec3 pos = fragPosition + 1.0 * 0.5;\n\n  if (\n    (pos.x > 0.5 - lineWidth && pos.x < 0.5 + lineWidth) // middle line\n    || pos.x > roadWidth - lineWidth\n    || pos.x < -roadWidth + 1.0 + lineWidth\n  ) {\n    color = roadColor2;\n  }\n\n  gl_FragColor = vec4(color, depth);\n}\n";export default{vertex,fragment,attributes:["position"],uniforms:["projection","model","view","time","roadLength","roadWidth","frequence","amplitude"]};