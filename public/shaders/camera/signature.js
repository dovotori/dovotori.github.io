import{uniformLights,addLightLocations,funcLightsColor}from"../utils/light";const vertex="\nattribute vec3 position;\nattribute vec3 normale;\nattribute vec4 tangent;\nuniform mat4 projection;\nuniform mat4 model;\nuniform mat4 view;\nuniform mat3 normalMatrix;\nuniform float time;\n\nvarying vec3 fragPosition;\nvarying vec3 fragNormale;\n\nvoid main()\n{\n  float displacement = 0.0;\n  vec3 newPosition = position + normale * displacement;\n  \n  fragPosition = normalize((view * model * vec4(newPosition, 1.0)).xyz);\n  fragNormale = normalMatrix * normalize(normale);\n  gl_Position = projection * view * model * vec4(newPosition, 1.0);\n}\n",fragment=`\nprecision mediump float;\nvarying vec3 fragPosition;\nvarying vec3 fragNormale;\n\nuniform vec4 color;\nuniform float rough; \nuniform float metal;\n\n${uniformLights}\n${funcLightsColor}\n\nvoid main() {\n  vec3 phong = funcLightsColor(\n    color.xyz,\n    vec3(1.0,1.0,1.0),\n    vec3(1.0,1.0,1.0),\n    fragNormale,\n    fragPosition\n  );\n  gl_FragColor = vec4(phong, 1.0);\n  // gl_FragColor = vec4(fragNormale, 1.0);\n}\n`;export default{vertex,fragment,attributes:["position","normale","tangent"],uniforms:["projection","model","view","normalMatrix","color","rough","metal","posLum","posEye","time"].concat(addLightLocations())};