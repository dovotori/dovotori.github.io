import{funcMap,PI}from"../utils";const vertex=`\nattribute float index;\nattribute float offset;\nuniform mat4 projection;\nuniform mat4 model;\nuniform mat4 view;\nuniform int maxfrequency;\nuniform int length;\nuniform int count;\nuniform float time;\nuniform vec2 mouse;\n\n${funcMap}\n${PI}\n\n#define SIZE 1.0\n\nvarying vec4 color;\n\nvoid main() {\n  float radian = funcMap(index, 0.0, float(length), 0.0, PI * 2.0);\n  \n  float amplitude = 0.05;\n  float speed = funcMap(offset, 0.0, float(count), 4.0, 10.0);\n  float shapeX = 0.6 * mouse.x;\n  float shapeY = 0.4 * mouse.y;\n  float variation = sin(index * shapeX + time * speed) * amplitude;\n  variation += cos(index * shapeY + time * speed) * amplitude;\n  // variation *= mouse.x;\n  // variation *= 0.5 + funcMap(offset, 0.0, float(count), -.5, .5);\n\n  float x = cos(radian) * (SIZE + variation);\n  float y = sin(radian) * (SIZE + variation);\n  float z = offset * mouse.x * 0.1;\n\n  vec3 position = vec3(x, y, z);\n  float opacity = funcMap(offset, 0.0, float(count), 0.0, 1.0);\n  color = vec4(1.0 - y, .8, 1.0, 1.0 - opacity);\n  \n  gl_Position = projection * view * model * vec4(position, 1.0);\n}\n`,fragment="\nprecision mediump float;\n\nvarying vec4 color;\n\nvoid main() {\n  gl_FragColor = color;\n}\n";export default{vertex,fragment,attributes:["index","offset"],uniforms:["projection","model","view","length","count","time","mouse"]};