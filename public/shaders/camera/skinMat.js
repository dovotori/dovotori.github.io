import{uniformLights,addLightLocations,funcLightsColor}from"../utils/light";const MAX_JOINT_MAT=4,vertex="\nattribute vec3 position;\nattribute vec3 normale;\nattribute vec4 joint;\nattribute vec4 weight;\n\nuniform mat4 projection;\nuniform mat4 model;\nuniform mat4 view;\nuniform mat4 jointMat[4];\nuniform mat3 normalMatrix;\n\nvarying vec3 fragPosition;\nvarying vec3 fragNormale;\n\nvoid main() {\n  mat4 skinMat =\n    weight.x * jointMat[int(joint.x)] +\n    weight.y * jointMat[int(joint.y)] +\n    weight.z * jointMat[int(joint.z)] +\n    weight.w * jointMat[int(joint.w)];\n  vec4 VMpos = view * model * skinMat * vec4(position, 1.0);\n  fragPosition = normalize(VMpos.xyz);\n  fragNormale = normalize(normalMatrix * normale);\n  gl_Position = projection * VMpos;\n}\n",fragment=`\nprecision mediump float;\n\nvarying vec3 fragPosition;\nvarying vec3 fragNormale;\n\nuniform vec4 color;\nuniform float rough; \nuniform float metal;\n\n${uniformLights}\n${funcLightsColor}\n\nvoid main() {\n  vec3 phong = funcLightsColor(\n    color.xyz, vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0), fragNormale, fragPosition\n  );\n  gl_FragColor = vec4(phong, 1.0);\n}\n`,getExtraLocations=()=>{const n=[];for(let o=0;o<4;o++)n.push(`jointMat[${o}]`);return n};export default{vertex,fragment,attributes:["position","joint","weight","normale"],uniforms:["projection","model","view","normalMatrix","color","rough","metal","posLum","posEye"].concat(getExtraLocations()).concat(addLightLocations())};