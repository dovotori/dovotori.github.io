import{funcMap,PI}from"../utils";const vertex=`\nattribute float value;\nattribute float index;\nuniform mat4 projection;\nuniform mat4 model;\nuniform mat4 view;\nuniform int maxfrequency;\nuniform int length;\n\n${funcMap}\n${PI}\n\n#define SIZE 3.0\n\nvarying vec3 color;\n\nvoid main() {\n  gl_PointSize = 1.5;\n\n  float normalizeValue = value / float(maxfrequency);\n\n  float y = funcMap(normalizeValue, 0.0, 1.0, 0.0, 1.0);\n  \n  float square = sqrt(float(length));\n  float modulo = mod(index, square);\n  float row = floor(index / square);\n  float x = funcMap(modulo, 0.0, square, -SIZE, SIZE);\n  float z = funcMap(row, 0.0, square, -SIZE, SIZE);\n\n  vec3 position = vec3(x, y, z);\n  color = vec3(1.0 - y, 0.7, 0.9);\n  gl_Position = projection * view * model * vec4(position, 1.0);\n}\n`,fragment="\nprecision mediump float;\n\nvarying vec3 color;\n\nvoid main() {\n  gl_FragColor = vec4(color, 1.0);\n}\n";export default{vertex,fragment,attributes:["value","index"],uniforms:["projection","model","view","length","maxfrequency"]};