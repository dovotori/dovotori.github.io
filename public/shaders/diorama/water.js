import{fogLocations}from"../utils/fog";import{funcWave}from"../utils/terrain";import{addLightLocations}from"../utils/light";import fragment from"./waterFragment1";const vertex=`\nattribute vec3 position;\n\nuniform mat4 projection;\nuniform mat4 model;\nuniform mat4 view;\nuniform mat3 normalMatrix;\n\nuniform vec2 moving;\nuniform float time;\nuniform float waterLevel;\nuniform vec2 gridSize;\nuniform vec3 posEye;\n\nvarying vec3 fragPosition;\nvarying vec3 fragColor;\nvarying vec2 fragTexture;\nvarying vec2 fragMoving;\nvarying vec3 fragNormale;\nvarying vec4 fragClipPosition;\nvarying vec3 fragEyeDir;\n\n${funcWave}\n\n#define THRESHOLD 0.005\n\nvoid main() {\n  gl_PointSize = 4.0;\n  vec3 transformed = position;\n\n  vec3 normale = vec3(0.0);\n  if (position.y == 0.0) {\n    vec2 coord = position.xz;\n\n    // for normale\n    vec3 tangent = vec3(1.0, 0.0,0.0);\n\t\tvec3 binormal = vec3(0.0, 0.0, 1.0);\n\n    Wave wave1 = funcWave(\n      coord, 0.1, 0.1, vec2(1.0, 0.0), vec2(time), tangent, binormal\n    );\n    Wave wave2 = funcWave(\n      coord, 0.05, 0.2, vec2(0.0, 1.0), vec2(time), wave1.tangent, wave1.binormal\n    );\n    \n    transformed = wave1.position + wave2.position;\n    transformed *= vec3(0.5, 1.0, 0.5); // rescale wave\n    transformed += vec3(0.0, waterLevel, 0.0); // water level\n    transformed *= vec3(1.0 - THRESHOLD, 1.0, 1.0 - THRESHOLD); // rescale \n    normale = vec3(0.0, 1.0, 0.0); // normalize(cross(wave2.tangent, wave2.binormal));\n  }\n\n  if (position.x == 1.0) {\n    normale = vec3(1.0, 0.0, 0.0);\n  } else if (position.x == -1.0) {\n    normale = vec3(-1.0, 0.0, 0.0);\n  } else if (position.z == 1.0) {\n    normale = vec3(0.0, 0.0, 1.0);\n  } else if (position.z == -1.0) {\n    normale = vec3(0.0, 0.0, -1.0);\n  }\n\n  fragNormale = normalMatrix * normale;\n  fragTexture = position.xz * 0.5 + 0.5;\n  fragPosition = transformed;\n  fragColor = vec3(position.xz, 0.0);\n  fragMoving = moving + time;\n  \n  vec4 worldPos = model * vec4(transformed, 1.0);\n  fragClipPosition = projection * view * worldPos;\n\n  fragEyeDir = posEye - worldPos.xyz;\n\n  gl_Position = fragClipPosition;\n}\n`;export default{vertex,fragment,attributes:["position"],uniforms:["projection","model","view","normalMatrix","moving","gridSize","waterLevel","reflectMap","refractMap","normaleMap","distortionMap","depthMap","posEye","time"].concat(fogLocations).concat(addLightLocations())};