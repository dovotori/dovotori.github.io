import{locations,getNaturalHeight}from"../utils/terrain";import{getFogAmount,fogLocations,fogUniforms}from"../utils/fog";import{locationsPBR,funcPBR}from"../utils/pbr";import{funcInstancing}from"../utils/instancing";const vertex=`\nattribute vec3 position;\nattribute vec3 normale;\nattribute vec2 texture;\nattribute vec3 offset;\nattribute vec3 acolor;\nattribute float size;\n\nuniform mat4 projection;\nuniform mat4 model;\nuniform mat4 view;\nuniform mat3 normalMatrix;\nuniform float waterLevel;\n\nvarying vec3 fragColor;\nvarying float fragFog;\nvarying vec3 fragNormale;\nvarying vec3 fragPosition;\n\n${getNaturalHeight}\n\n${funcInstancing}\n\nvoid main() {\n  vec3 fixedPos = getFixedPosition(offset);\n  if (fixedPos.y < waterLevel) {\n    fixedPos = vec3(0.0, 100.0, 0.0); // we hide it\n  }\n  vec4 terrainPos = getTerrainPosition(fixedPos, position);\n  vec4 pos = projection * view * terrainPos;\n  gl_Position = pos;\n\n  fragPosition = terrainPos.xyz;\n  fragColor = acolor;\n  fragNormale = normalMatrix * normale;\n}\n`,fragment=`\nprecision mediump float;\n\nuniform vec3 posEye;\n${fogUniforms}\n\nvarying vec3 fragColor;\nvarying vec3 fragNormale;\nvarying vec3 fragPosition;\n\n${funcPBR}\n${getFogAmount}\n\nvoid main() {\n  vec3 pbrColor = funcPBR(fragPosition, fragNormale, posEye);\n  vec4 finalColor = vec4(mix(fragColor, pbrColor * 4.0, 0.8), 1.0);\n  float fogAmount = getFogAmount(fragPosition, fogStart, fogEnd);\n  finalColor = mix(finalColor, fogColor, fogAmount);\n  gl_FragColor = finalColor;\n}\n`;export default{vertex,fragment,attributes:["position","texture","normale","offset","acolor","size"],uniforms:["projection","model","view","normalMatrix","fogStart","fogEnd","fogColor","posEye","waterLevel"].concat(locations).concat(fogLocations).concat(locationsPBR)};