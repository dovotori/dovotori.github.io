import{getFogAmount,fogLocations,fogUniforms}from"../utils/fog";import{locations,getNaturalHeight,getNormale}from"../utils/terrain";import{uniformLights,addLightLocations,funcLightsColor}from"../utils/light";const vertex=`\nattribute vec3 position;\n\nuniform mat4 projection;\nuniform mat4 model;\nuniform mat4 view;\nuniform mat3 normalMatrix;\n\nvarying vec3 fragPosition;\nvarying vec3 fragClipPosition;\nvarying vec3 fragColor;\nvarying vec2 fragTexture;\nvarying vec3 fragNormale;\n\n${getNaturalHeight}\n${getNormale}\n\nvoid main() {\n  vec3 tranformed = position;\n\n  if (position.y == 0.0) {\n    vec2 coord = position.xz + moving;\n    tranformed.y = getNaturalHeight(coord);\n  }\n\n  fragNormale = normalMatrix * getNormale(position, tranformed);\n  fragTexture = position.xz * 0.5 + 0.5;\n  fragPosition = tranformed;\n  fragColor = vec3(position.xz, 0.0);\n  \n  vec4 pos = projection * view * model * vec4(tranformed, 1.0);\n  fragClipPosition = pos.xyz;\n  gl_Position = pos;\n}\n`,NB_COLORS=8,fragment=`\nprecision mediump float;\n\nuniform float reflectPass;\nuniform float refractPass;\nuniform float waterLevel;\n\n${fogUniforms}\n${uniformLights}\n\nvarying vec3 fragPosition;\nvarying vec3 fragColor;\nvarying vec2 fragTexture;\nvarying vec3 fragNormale;\nvarying vec3 fragClipPosition;\n\n${funcLightsColor}\n${getFogAmount}\n\n#define NB_COLORS 8\nuniform vec3 colors[NB_COLORS];\n\nvec3 getColor(float height) {\n  float relHeight = height * float(NB_COLORS);\n  vec3 color = colors[0];\n  for(int i = 0; i < NB_COLORS; i += 1) {\n    if (relHeight > float(i)) {\n      float mixFactor = smoothstep(float(i), float(i + 1), relHeight);\n      color = mix(colors[i], colors[i + 1], mixFactor);\n    }\n  }\n  return color;\n}\n\n#define THRESHOLD 0.01\n\nvoid main() {\n  if (reflectPass > 0.5 || refractPass > 0.5) {\n    if (\n      (reflectPass > 0.5 && fragPosition.y < waterLevel)\n      || (refractPass > 0.5 && fragPosition.y > waterLevel)\n      || fragPosition.x >= 1.0 - THRESHOLD\n      || fragPosition.x <= -1.0 + THRESHOLD\n      || fragPosition.z >= 1.0 - THRESHOLD\n      || fragPosition.z <= -1.0 + THRESHOLD \n    ) {\n      discard;\n    }\n  }\n\n  vec3 color = getColor(fragPosition.y);\n\n   vec3 lightColor = funcLightsColor(\n    vec3(1.0),\n    color,\n    vec3(0.0),\n    fragNormale,\n    fragPosition\n  );\n\n  vec4 finalColor = vec4(lightColor, 1.0);\n  float fogAmount = getFogAmount(fragPosition, fogStart, fogEnd);\n  if (reflectPass > 0.5 || refractPass > 0.5) {\n    fogAmount = 0.0; // no fog for clipping\n  }\n  finalColor = mix(finalColor, fogColor, fogAmount);\n\n  gl_FragColor = finalColor;\n}\n`;export default{vertex,fragment,attributes:["position"],uniforms:["projection","model","view","normalMatrix","reflectPass","refractPass","waterLevel"].concat(locations).concat(fogLocations).concat(Array.from({length:8}).map(((o,n)=>`colors[${n}]`))).concat(addLightLocations())};